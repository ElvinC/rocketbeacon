
rocketbeacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004848  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08004980  08004980  00014980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004adc  08004adc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004adc  08004adc  00014adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ae4  08004ae4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ae4  08004ae4  00014ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ae8  08004ae8  00014ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000014  08004b00  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08004b00  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012268  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002862  00000000  00000000  000322a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  00034b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  00035e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab62  00000000  00000000  000370d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d8a  00000000  00000000  00051c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7721  00000000  00000000  000639bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010b0dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005250  00000000  00000000  0010b130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000014 	.word	0x20000014
 8000154:	00000000 	.word	0x00000000
 8000158:	08004968 	.word	0x08004968

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000018 	.word	0x20000018
 8000174:	08004968 	.word	0x08004968

08000178 <__aeabi_drsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800017c:	e002      	b.n	8000184 <__adddf3>
 800017e:	bf00      	nop

08000180 <__aeabi_dsub>:
 8000180:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000184 <__adddf3>:
 8000184:	b530      	push	{r4, r5, lr}
 8000186:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018e:	ea94 0f05 	teq	r4, r5
 8000192:	bf08      	it	eq
 8000194:	ea90 0f02 	teqeq	r0, r2
 8000198:	bf1f      	itttt	ne
 800019a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001aa:	f000 80e2 	beq.w	8000372 <__adddf3+0x1ee>
 80001ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b6:	bfb8      	it	lt
 80001b8:	426d      	neglt	r5, r5
 80001ba:	dd0c      	ble.n	80001d6 <__adddf3+0x52>
 80001bc:	442c      	add	r4, r5
 80001be:	ea80 0202 	eor.w	r2, r0, r2
 80001c2:	ea81 0303 	eor.w	r3, r1, r3
 80001c6:	ea82 0000 	eor.w	r0, r2, r0
 80001ca:	ea83 0101 	eor.w	r1, r3, r1
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	2d36      	cmp	r5, #54	; 0x36
 80001d8:	bf88      	it	hi
 80001da:	bd30      	pophi	{r4, r5, pc}
 80001dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x70>
 80001ee:	4240      	negs	r0, r0
 80001f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000200:	d002      	beq.n	8000208 <__adddf3+0x84>
 8000202:	4252      	negs	r2, r2
 8000204:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000208:	ea94 0f05 	teq	r4, r5
 800020c:	f000 80a7 	beq.w	800035e <__adddf3+0x1da>
 8000210:	f1a4 0401 	sub.w	r4, r4, #1
 8000214:	f1d5 0e20 	rsbs	lr, r5, #32
 8000218:	db0d      	blt.n	8000236 <__adddf3+0xb2>
 800021a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021e:	fa22 f205 	lsr.w	r2, r2, r5
 8000222:	1880      	adds	r0, r0, r2
 8000224:	f141 0100 	adc.w	r1, r1, #0
 8000228:	fa03 f20e 	lsl.w	r2, r3, lr
 800022c:	1880      	adds	r0, r0, r2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	4159      	adcs	r1, r3
 8000234:	e00e      	b.n	8000254 <__adddf3+0xd0>
 8000236:	f1a5 0520 	sub.w	r5, r5, #32
 800023a:	f10e 0e20 	add.w	lr, lr, #32
 800023e:	2a01      	cmp	r2, #1
 8000240:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000244:	bf28      	it	cs
 8000246:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	18c0      	adds	r0, r0, r3
 8000250:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000254:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000258:	d507      	bpl.n	800026a <__adddf3+0xe6>
 800025a:	f04f 0e00 	mov.w	lr, #0
 800025e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000262:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000266:	eb6e 0101 	sbc.w	r1, lr, r1
 800026a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026e:	d31b      	bcc.n	80002a8 <__adddf3+0x124>
 8000270:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000274:	d30c      	bcc.n	8000290 <__adddf3+0x10c>
 8000276:	0849      	lsrs	r1, r1, #1
 8000278:	ea5f 0030 	movs.w	r0, r0, rrx
 800027c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000280:	f104 0401 	add.w	r4, r4, #1
 8000284:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000288:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800028c:	f080 809a 	bcs.w	80003c4 <__adddf3+0x240>
 8000290:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	ea41 0105 	orr.w	r1, r1, r5
 80002a6:	bd30      	pop	{r4, r5, pc}
 80002a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002ac:	4140      	adcs	r0, r0
 80002ae:	eb41 0101 	adc.w	r1, r1, r1
 80002b2:	3c01      	subs	r4, #1
 80002b4:	bf28      	it	cs
 80002b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ba:	d2e9      	bcs.n	8000290 <__adddf3+0x10c>
 80002bc:	f091 0f00 	teq	r1, #0
 80002c0:	bf04      	itt	eq
 80002c2:	4601      	moveq	r1, r0
 80002c4:	2000      	moveq	r0, #0
 80002c6:	fab1 f381 	clz	r3, r1
 80002ca:	bf08      	it	eq
 80002cc:	3320      	addeq	r3, #32
 80002ce:	f1a3 030b 	sub.w	r3, r3, #11
 80002d2:	f1b3 0220 	subs.w	r2, r3, #32
 80002d6:	da0c      	bge.n	80002f2 <__adddf3+0x16e>
 80002d8:	320c      	adds	r2, #12
 80002da:	dd08      	ble.n	80002ee <__adddf3+0x16a>
 80002dc:	f102 0c14 	add.w	ip, r2, #20
 80002e0:	f1c2 020c 	rsb	r2, r2, #12
 80002e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e8:	fa21 f102 	lsr.w	r1, r1, r2
 80002ec:	e00c      	b.n	8000308 <__adddf3+0x184>
 80002ee:	f102 0214 	add.w	r2, r2, #20
 80002f2:	bfd8      	it	le
 80002f4:	f1c2 0c20 	rsble	ip, r2, #32
 80002f8:	fa01 f102 	lsl.w	r1, r1, r2
 80002fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000300:	bfdc      	itt	le
 8000302:	ea41 010c 	orrle.w	r1, r1, ip
 8000306:	4090      	lslle	r0, r2
 8000308:	1ae4      	subs	r4, r4, r3
 800030a:	bfa2      	ittt	ge
 800030c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000310:	4329      	orrge	r1, r5
 8000312:	bd30      	popge	{r4, r5, pc}
 8000314:	ea6f 0404 	mvn.w	r4, r4
 8000318:	3c1f      	subs	r4, #31
 800031a:	da1c      	bge.n	8000356 <__adddf3+0x1d2>
 800031c:	340c      	adds	r4, #12
 800031e:	dc0e      	bgt.n	800033e <__adddf3+0x1ba>
 8000320:	f104 0414 	add.w	r4, r4, #20
 8000324:	f1c4 0220 	rsb	r2, r4, #32
 8000328:	fa20 f004 	lsr.w	r0, r0, r4
 800032c:	fa01 f302 	lsl.w	r3, r1, r2
 8000330:	ea40 0003 	orr.w	r0, r0, r3
 8000334:	fa21 f304 	lsr.w	r3, r1, r4
 8000338:	ea45 0103 	orr.w	r1, r5, r3
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	f1c4 040c 	rsb	r4, r4, #12
 8000342:	f1c4 0220 	rsb	r2, r4, #32
 8000346:	fa20 f002 	lsr.w	r0, r0, r2
 800034a:	fa01 f304 	lsl.w	r3, r1, r4
 800034e:	ea40 0003 	orr.w	r0, r0, r3
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	fa21 f004 	lsr.w	r0, r1, r4
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	f094 0f00 	teq	r4, #0
 8000362:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000366:	bf06      	itte	eq
 8000368:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800036c:	3401      	addeq	r4, #1
 800036e:	3d01      	subne	r5, #1
 8000370:	e74e      	b.n	8000210 <__adddf3+0x8c>
 8000372:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000376:	bf18      	it	ne
 8000378:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800037c:	d029      	beq.n	80003d2 <__adddf3+0x24e>
 800037e:	ea94 0f05 	teq	r4, r5
 8000382:	bf08      	it	eq
 8000384:	ea90 0f02 	teqeq	r0, r2
 8000388:	d005      	beq.n	8000396 <__adddf3+0x212>
 800038a:	ea54 0c00 	orrs.w	ip, r4, r0
 800038e:	bf04      	itt	eq
 8000390:	4619      	moveq	r1, r3
 8000392:	4610      	moveq	r0, r2
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	ea91 0f03 	teq	r1, r3
 800039a:	bf1e      	ittt	ne
 800039c:	2100      	movne	r1, #0
 800039e:	2000      	movne	r0, #0
 80003a0:	bd30      	popne	{r4, r5, pc}
 80003a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a6:	d105      	bne.n	80003b4 <__adddf3+0x230>
 80003a8:	0040      	lsls	r0, r0, #1
 80003aa:	4149      	adcs	r1, r1
 80003ac:	bf28      	it	cs
 80003ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b2:	bd30      	pop	{r4, r5, pc}
 80003b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b8:	bf3c      	itt	cc
 80003ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003be:	bd30      	popcc	{r4, r5, pc}
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003cc:	f04f 0000 	mov.w	r0, #0
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf1a      	itte	ne
 80003d8:	4619      	movne	r1, r3
 80003da:	4610      	movne	r0, r2
 80003dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e0:	bf1c      	itt	ne
 80003e2:	460b      	movne	r3, r1
 80003e4:	4602      	movne	r2, r0
 80003e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ea:	bf06      	itte	eq
 80003ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f0:	ea91 0f03 	teqeq	r1, r3
 80003f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	bf00      	nop

080003fc <__aeabi_ui2d>:
 80003fc:	f090 0f00 	teq	r0, #0
 8000400:	bf04      	itt	eq
 8000402:	2100      	moveq	r1, #0
 8000404:	4770      	bxeq	lr
 8000406:	b530      	push	{r4, r5, lr}
 8000408:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800040c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000410:	f04f 0500 	mov.w	r5, #0
 8000414:	f04f 0100 	mov.w	r1, #0
 8000418:	e750      	b.n	80002bc <__adddf3+0x138>
 800041a:	bf00      	nop

0800041c <__aeabi_i2d>:
 800041c:	f090 0f00 	teq	r0, #0
 8000420:	bf04      	itt	eq
 8000422:	2100      	moveq	r1, #0
 8000424:	4770      	bxeq	lr
 8000426:	b530      	push	{r4, r5, lr}
 8000428:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800042c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000430:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000434:	bf48      	it	mi
 8000436:	4240      	negmi	r0, r0
 8000438:	f04f 0100 	mov.w	r1, #0
 800043c:	e73e      	b.n	80002bc <__adddf3+0x138>
 800043e:	bf00      	nop

08000440 <__aeabi_f2d>:
 8000440:	0042      	lsls	r2, r0, #1
 8000442:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000446:	ea4f 0131 	mov.w	r1, r1, rrx
 800044a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044e:	bf1f      	itttt	ne
 8000450:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000454:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000458:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800045c:	4770      	bxne	lr
 800045e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000462:	bf08      	it	eq
 8000464:	4770      	bxeq	lr
 8000466:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800046a:	bf04      	itt	eq
 800046c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e71c      	b.n	80002bc <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aed8 	beq.w	800026a <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6bd      	b.n	800026a <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <__aeabi_d2uiz>:
 8000914:	004a      	lsls	r2, r1, #1
 8000916:	d211      	bcs.n	800093c <__aeabi_d2uiz+0x28>
 8000918:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800091c:	d211      	bcs.n	8000942 <__aeabi_d2uiz+0x2e>
 800091e:	d50d      	bpl.n	800093c <__aeabi_d2uiz+0x28>
 8000920:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000924:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000928:	d40e      	bmi.n	8000948 <__aeabi_d2uiz+0x34>
 800092a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800092e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000932:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000936:	fa23 f002 	lsr.w	r0, r3, r2
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000946:	d102      	bne.n	800094e <__aeabi_d2uiz+0x3a>
 8000948:	f04f 30ff 	mov.w	r0, #4294967295
 800094c:	4770      	bx	lr
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	4770      	bx	lr

08000954 <__aeabi_uldivmod>:
 8000954:	b953      	cbnz	r3, 800096c <__aeabi_uldivmod+0x18>
 8000956:	b94a      	cbnz	r2, 800096c <__aeabi_uldivmod+0x18>
 8000958:	2900      	cmp	r1, #0
 800095a:	bf08      	it	eq
 800095c:	2800      	cmpeq	r0, #0
 800095e:	bf1c      	itt	ne
 8000960:	f04f 31ff 	movne.w	r1, #4294967295
 8000964:	f04f 30ff 	movne.w	r0, #4294967295
 8000968:	f000 b974 	b.w	8000c54 <__aeabi_idiv0>
 800096c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000970:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000974:	f000 f806 	bl	8000984 <__udivmoddi4>
 8000978:	f8dd e004 	ldr.w	lr, [sp, #4]
 800097c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000980:	b004      	add	sp, #16
 8000982:	4770      	bx	lr

08000984 <__udivmoddi4>:
 8000984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000988:	9e08      	ldr	r6, [sp, #32]
 800098a:	460d      	mov	r5, r1
 800098c:	4604      	mov	r4, r0
 800098e:	4688      	mov	r8, r1
 8000990:	2b00      	cmp	r3, #0
 8000992:	d14d      	bne.n	8000a30 <__udivmoddi4+0xac>
 8000994:	428a      	cmp	r2, r1
 8000996:	4694      	mov	ip, r2
 8000998:	d968      	bls.n	8000a6c <__udivmoddi4+0xe8>
 800099a:	fab2 f282 	clz	r2, r2
 800099e:	b152      	cbz	r2, 80009b6 <__udivmoddi4+0x32>
 80009a0:	fa01 f302 	lsl.w	r3, r1, r2
 80009a4:	f1c2 0120 	rsb	r1, r2, #32
 80009a8:	fa20 f101 	lsr.w	r1, r0, r1
 80009ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b0:	ea41 0803 	orr.w	r8, r1, r3
 80009b4:	4094      	lsls	r4, r2
 80009b6:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80009ba:	0c21      	lsrs	r1, r4, #16
 80009bc:	fbb8 fef5 	udiv	lr, r8, r5
 80009c0:	fa1f f78c 	uxth.w	r7, ip
 80009c4:	fb05 831e 	mls	r3, r5, lr, r8
 80009c8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009cc:	fb0e f107 	mul.w	r1, lr, r7
 80009d0:	4299      	cmp	r1, r3
 80009d2:	d90b      	bls.n	80009ec <__udivmoddi4+0x68>
 80009d4:	eb1c 0303 	adds.w	r3, ip, r3
 80009d8:	f10e 30ff 	add.w	r0, lr, #4294967295
 80009dc:	f080 811e 	bcs.w	8000c1c <__udivmoddi4+0x298>
 80009e0:	4299      	cmp	r1, r3
 80009e2:	f240 811b 	bls.w	8000c1c <__udivmoddi4+0x298>
 80009e6:	f1ae 0e02 	sub.w	lr, lr, #2
 80009ea:	4463      	add	r3, ip
 80009ec:	1a5b      	subs	r3, r3, r1
 80009ee:	b2a4      	uxth	r4, r4
 80009f0:	fbb3 f0f5 	udiv	r0, r3, r5
 80009f4:	fb05 3310 	mls	r3, r5, r0, r3
 80009f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009fc:	fb00 f707 	mul.w	r7, r0, r7
 8000a00:	42a7      	cmp	r7, r4
 8000a02:	d90a      	bls.n	8000a1a <__udivmoddi4+0x96>
 8000a04:	eb1c 0404 	adds.w	r4, ip, r4
 8000a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a0c:	f080 8108 	bcs.w	8000c20 <__udivmoddi4+0x29c>
 8000a10:	42a7      	cmp	r7, r4
 8000a12:	f240 8105 	bls.w	8000c20 <__udivmoddi4+0x29c>
 8000a16:	4464      	add	r4, ip
 8000a18:	3802      	subs	r0, #2
 8000a1a:	1be4      	subs	r4, r4, r7
 8000a1c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000a20:	2100      	movs	r1, #0
 8000a22:	b11e      	cbz	r6, 8000a2c <__udivmoddi4+0xa8>
 8000a24:	40d4      	lsrs	r4, r2
 8000a26:	2300      	movs	r3, #0
 8000a28:	e9c6 4300 	strd	r4, r3, [r6]
 8000a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a30:	428b      	cmp	r3, r1
 8000a32:	d908      	bls.n	8000a46 <__udivmoddi4+0xc2>
 8000a34:	2e00      	cmp	r6, #0
 8000a36:	f000 80ee 	beq.w	8000c16 <__udivmoddi4+0x292>
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	e9c6 0500 	strd	r0, r5, [r6]
 8000a40:	4608      	mov	r0, r1
 8000a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a46:	fab3 f183 	clz	r1, r3
 8000a4a:	2900      	cmp	r1, #0
 8000a4c:	d14a      	bne.n	8000ae4 <__udivmoddi4+0x160>
 8000a4e:	42ab      	cmp	r3, r5
 8000a50:	d302      	bcc.n	8000a58 <__udivmoddi4+0xd4>
 8000a52:	4282      	cmp	r2, r0
 8000a54:	f200 80f9 	bhi.w	8000c4a <__udivmoddi4+0x2c6>
 8000a58:	1a84      	subs	r4, r0, r2
 8000a5a:	eb65 0303 	sbc.w	r3, r5, r3
 8000a5e:	2001      	movs	r0, #1
 8000a60:	4698      	mov	r8, r3
 8000a62:	2e00      	cmp	r6, #0
 8000a64:	d0e2      	beq.n	8000a2c <__udivmoddi4+0xa8>
 8000a66:	e9c6 4800 	strd	r4, r8, [r6]
 8000a6a:	e7df      	b.n	8000a2c <__udivmoddi4+0xa8>
 8000a6c:	b902      	cbnz	r2, 8000a70 <__udivmoddi4+0xec>
 8000a6e:	deff      	udf	#255	; 0xff
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	f040 8091 	bne.w	8000b9c <__udivmoddi4+0x218>
 8000a7a:	eba1 050c 	sub.w	r5, r1, ip
 8000a7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a82:	fa1f fe8c 	uxth.w	lr, ip
 8000a86:	2101      	movs	r1, #1
 8000a88:	fbb5 f3f7 	udiv	r3, r5, r7
 8000a8c:	fb07 5013 	mls	r0, r7, r3, r5
 8000a90:	0c25      	lsrs	r5, r4, #16
 8000a92:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a96:	fb0e f003 	mul.w	r0, lr, r3
 8000a9a:	42a8      	cmp	r0, r5
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x12c>
 8000a9e:	eb1c 0505 	adds.w	r5, ip, r5
 8000aa2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000aa6:	d202      	bcs.n	8000aae <__udivmoddi4+0x12a>
 8000aa8:	42a8      	cmp	r0, r5
 8000aaa:	f200 80cb 	bhi.w	8000c44 <__udivmoddi4+0x2c0>
 8000aae:	4643      	mov	r3, r8
 8000ab0:	1a2d      	subs	r5, r5, r0
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb5 f0f7 	udiv	r0, r5, r7
 8000ab8:	fb07 5510 	mls	r5, r7, r0, r5
 8000abc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ac0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ac4:	45a6      	cmp	lr, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x156>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ad0:	d202      	bcs.n	8000ad8 <__udivmoddi4+0x154>
 8000ad2:	45a6      	cmp	lr, r4
 8000ad4:	f200 80bb 	bhi.w	8000c4e <__udivmoddi4+0x2ca>
 8000ad8:	4628      	mov	r0, r5
 8000ada:	eba4 040e 	sub.w	r4, r4, lr
 8000ade:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ae2:	e79e      	b.n	8000a22 <__udivmoddi4+0x9e>
 8000ae4:	f1c1 0720 	rsb	r7, r1, #32
 8000ae8:	408b      	lsls	r3, r1
 8000aea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000af2:	fa20 f407 	lsr.w	r4, r0, r7
 8000af6:	fa05 f301 	lsl.w	r3, r5, r1
 8000afa:	431c      	orrs	r4, r3
 8000afc:	40fd      	lsrs	r5, r7
 8000afe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b02:	fa00 f301 	lsl.w	r3, r0, r1
 8000b06:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b0a:	0c20      	lsrs	r0, r4, #16
 8000b0c:	fa1f fe8c 	uxth.w	lr, ip
 8000b10:	fb09 5518 	mls	r5, r9, r8, r5
 8000b14:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000b18:	fb08 f00e 	mul.w	r0, r8, lr
 8000b1c:	42a8      	cmp	r0, r5
 8000b1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b22:	d90b      	bls.n	8000b3c <__udivmoddi4+0x1b8>
 8000b24:	eb1c 0505 	adds.w	r5, ip, r5
 8000b28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b2c:	f080 8088 	bcs.w	8000c40 <__udivmoddi4+0x2bc>
 8000b30:	42a8      	cmp	r0, r5
 8000b32:	f240 8085 	bls.w	8000c40 <__udivmoddi4+0x2bc>
 8000b36:	f1a8 0802 	sub.w	r8, r8, #2
 8000b3a:	4465      	add	r5, ip
 8000b3c:	1a2d      	subs	r5, r5, r0
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb5 f0f9 	udiv	r0, r5, r9
 8000b44:	fb09 5510 	mls	r5, r9, r0, r5
 8000b48:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	45ae      	cmp	lr, r5
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x1e2>
 8000b54:	eb1c 0505 	adds.w	r5, ip, r5
 8000b58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b5c:	d26c      	bcs.n	8000c38 <__udivmoddi4+0x2b4>
 8000b5e:	45ae      	cmp	lr, r5
 8000b60:	d96a      	bls.n	8000c38 <__udivmoddi4+0x2b4>
 8000b62:	3802      	subs	r0, #2
 8000b64:	4465      	add	r5, ip
 8000b66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b6e:	eba5 050e 	sub.w	r5, r5, lr
 8000b72:	42a5      	cmp	r5, r4
 8000b74:	46c8      	mov	r8, r9
 8000b76:	46a6      	mov	lr, r4
 8000b78:	d356      	bcc.n	8000c28 <__udivmoddi4+0x2a4>
 8000b7a:	d053      	beq.n	8000c24 <__udivmoddi4+0x2a0>
 8000b7c:	b15e      	cbz	r6, 8000b96 <__udivmoddi4+0x212>
 8000b7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000b82:	eb65 050e 	sbc.w	r5, r5, lr
 8000b86:	fa05 f707 	lsl.w	r7, r5, r7
 8000b8a:	fa22 f301 	lsr.w	r3, r2, r1
 8000b8e:	40cd      	lsrs	r5, r1
 8000b90:	431f      	orrs	r7, r3
 8000b92:	e9c6 7500 	strd	r7, r5, [r6]
 8000b96:	2100      	movs	r1, #0
 8000b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ba0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ba4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba8:	fa25 f303 	lsr.w	r3, r5, r3
 8000bac:	4095      	lsls	r5, r2
 8000bae:	430d      	orrs	r5, r1
 8000bb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb4:	fa1f fe8c 	uxth.w	lr, ip
 8000bb8:	fbb3 f1f7 	udiv	r1, r3, r7
 8000bbc:	fb07 3011 	mls	r0, r7, r1, r3
 8000bc0:	0c2b      	lsrs	r3, r5, #16
 8000bc2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000bc6:	fb01 f00e 	mul.w	r0, r1, lr
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x260>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f101 38ff 	add.w	r8, r1, #4294967295
 8000bda:	d22f      	bcs.n	8000c3c <__udivmoddi4+0x2b8>
 8000bdc:	4298      	cmp	r0, r3
 8000bde:	d92d      	bls.n	8000c3c <__udivmoddi4+0x2b8>
 8000be0:	3902      	subs	r1, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a1b      	subs	r3, r3, r0
 8000be6:	b2ad      	uxth	r5, r5
 8000be8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bec:	fb07 3310 	mls	r3, r7, r0, r3
 8000bf0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bf4:	fb00 f30e 	mul.w	r3, r0, lr
 8000bf8:	42ab      	cmp	r3, r5
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x28a>
 8000bfc:	eb1c 0505 	adds.w	r5, ip, r5
 8000c00:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c04:	d216      	bcs.n	8000c34 <__udivmoddi4+0x2b0>
 8000c06:	42ab      	cmp	r3, r5
 8000c08:	d914      	bls.n	8000c34 <__udivmoddi4+0x2b0>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	4465      	add	r5, ip
 8000c0e:	1aed      	subs	r5, r5, r3
 8000c10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c14:	e738      	b.n	8000a88 <__udivmoddi4+0x104>
 8000c16:	4631      	mov	r1, r6
 8000c18:	4630      	mov	r0, r6
 8000c1a:	e707      	b.n	8000a2c <__udivmoddi4+0xa8>
 8000c1c:	4686      	mov	lr, r0
 8000c1e:	e6e5      	b.n	80009ec <__udivmoddi4+0x68>
 8000c20:	4618      	mov	r0, r3
 8000c22:	e6fa      	b.n	8000a1a <__udivmoddi4+0x96>
 8000c24:	454b      	cmp	r3, r9
 8000c26:	d2a9      	bcs.n	8000b7c <__udivmoddi4+0x1f8>
 8000c28:	ebb9 0802 	subs.w	r8, r9, r2
 8000c2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c30:	3801      	subs	r0, #1
 8000c32:	e7a3      	b.n	8000b7c <__udivmoddi4+0x1f8>
 8000c34:	4640      	mov	r0, r8
 8000c36:	e7ea      	b.n	8000c0e <__udivmoddi4+0x28a>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	e794      	b.n	8000b66 <__udivmoddi4+0x1e2>
 8000c3c:	4641      	mov	r1, r8
 8000c3e:	e7d1      	b.n	8000be4 <__udivmoddi4+0x260>
 8000c40:	46d0      	mov	r8, sl
 8000c42:	e77b      	b.n	8000b3c <__udivmoddi4+0x1b8>
 8000c44:	3b02      	subs	r3, #2
 8000c46:	4465      	add	r5, ip
 8000c48:	e732      	b.n	8000ab0 <__udivmoddi4+0x12c>
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e709      	b.n	8000a62 <__udivmoddi4+0xde>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	e742      	b.n	8000ada <__udivmoddi4+0x156>

08000c54 <__aeabi_idiv0>:
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <LL_RCC_HSE_EnableDiv2>:
  * @brief  Enable HSE sysclk and pll prescaler division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_EnableDiv2
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableDiv2(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEPRE);
 8000c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4013      	ands	r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c98:	68fb      	ldr	r3, [r7, #12]
}
 8000c9a:	bf00      	nop
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <SetStandbyXOSC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SetStandbyXOSC() {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
    uint8_t txbuf[2] = {0x80, 0x01};
 8000caa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cae:	80bb      	strh	r3, [r7, #4]
    HAL_SUBGHZ_ExecSetCmd(&hsubghz, txbuf[0], txbuf+1, sizeof(txbuf)-1);
 8000cb0:	7939      	ldrb	r1, [r7, #4]
 8000cb2:	1d3a      	adds	r2, r7, #4
 8000cb4:	3201      	adds	r2, #1
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <SetStandbyXOSC+0x24>)
 8000cba:	f002 ff63 	bl	8003b84 <HAL_SUBGHZ_ExecSetCmd>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200000b8 	.word	0x200000b8

08000ccc <SetPacketTypeLora>:

void SetPacketTypeLora() {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
    uint8_t txbuf[2] = {0x8A, 0x01};
 8000cd2:	f44f 73c5 	mov.w	r3, #394	; 0x18a
 8000cd6:	80bb      	strh	r3, [r7, #4]
    HAL_SUBGHZ_ExecSetCmd(&hsubghz, txbuf[0], txbuf+1, sizeof(txbuf)-1);
 8000cd8:	7939      	ldrb	r1, [r7, #4]
 8000cda:	1d3a      	adds	r2, r7, #4
 8000cdc:	3201      	adds	r2, #1
 8000cde:	2301      	movs	r3, #1
 8000ce0:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <SetPacketTypeLora+0x24>)
 8000ce2:	f002 ff4f 	bl	8003b84 <HAL_SUBGHZ_ExecSetCmd>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200000b8 	.word	0x200000b8

08000cf4 <SetPacketTypeFSK>:

void SetPacketTypeFSK() {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
    uint8_t txbuf[2] = {0x8A, 0x00};
 8000cfa:	238a      	movs	r3, #138	; 0x8a
 8000cfc:	80bb      	strh	r3, [r7, #4]
    HAL_SUBGHZ_ExecSetCmd(&hsubghz, txbuf[0], txbuf+1, sizeof(txbuf)-1);
 8000cfe:	7939      	ldrb	r1, [r7, #4]
 8000d00:	1d3a      	adds	r2, r7, #4
 8000d02:	3201      	adds	r2, #1
 8000d04:	2301      	movs	r3, #1
 8000d06:	4803      	ldr	r0, [pc, #12]	; (8000d14 <SetPacketTypeFSK+0x20>)
 8000d08:	f002 ff3c 	bl	8003b84 <HAL_SUBGHZ_ExecSetCmd>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200000b8 	.word	0x200000b8

08000d18 <ComputeRfFreq>:

uint32_t ComputeRfFreq(double frequencyMhz) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	e9c7 0100 	strd	r0, r1, [r7]
    return (uint32_t)(frequencyMhz * 1048576L); //2^25/(32e6)
 8000d22:	f04f 0200 	mov.w	r2, #0
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <ComputeRfFreq+0x30>)
 8000d28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d2c:	f7ff fbe0 	bl	80004f0 <__aeabi_dmul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4610      	mov	r0, r2
 8000d36:	4619      	mov	r1, r3
 8000d38:	f7ff fdec 	bl	8000914 <__aeabi_d2uiz>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	41300000 	.word	0x41300000

08000d4c <SetRfFreq>:

void SetRfFreq(uint32_t rfFreq) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
    uint8_t txbuf[5] = {0x86, (rfFreq & 0xFF000000) >> 24, (rfFreq & 0x00FF0000) >> 16, (rfFreq & 0x0000FF00) >> 8, rfFreq & 0x000000FF};
 8000d54:	2386      	movs	r3, #134	; 0x86
 8000d56:	723b      	strb	r3, [r7, #8]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	0e1b      	lsrs	r3, r3, #24
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	727b      	strb	r3, [r7, #9]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	0c1b      	lsrs	r3, r3, #16
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	72bb      	strb	r3, [r7, #10]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	0a1b      	lsrs	r3, r3, #8
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	72fb      	strb	r3, [r7, #11]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	733b      	strb	r3, [r7, #12]
    HAL_SUBGHZ_ExecSetCmd(&hsubghz, txbuf[0], txbuf+1, sizeof(txbuf)-1);
 8000d76:	7a39      	ldrb	r1, [r7, #8]
 8000d78:	f107 0208 	add.w	r2, r7, #8
 8000d7c:	3201      	adds	r2, #1
 8000d7e:	2304      	movs	r3, #4
 8000d80:	4803      	ldr	r0, [pc, #12]	; (8000d90 <SetRfFreq+0x44>)
 8000d82:	f002 feff 	bl	8003b84 <HAL_SUBGHZ_ExecSetCmd>
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200000b8 	.word	0x200000b8

08000d94 <SetPa22dB>:
    // set Pa to 14 dB.
    uint8_t txbuf[5] = {0x95, 0x02, 0x02, 0x00, 0x01};
    HAL_SUBGHZ_ExecSetCmd(&hsubghz, txbuf[0], txbuf+1, sizeof(txbuf)-1);
}

void SetPa22dB() {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
    // set Pa to the highest 22 dBm
    uint8_t txbuf[5] = {0x95, 0x04, 0x07, 0x00, 0x01};
 8000d9a:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <SetPa22dB+0x2c>)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000da2:	6018      	str	r0, [r3, #0]
 8000da4:	3304      	adds	r3, #4
 8000da6:	7019      	strb	r1, [r3, #0]
    HAL_SUBGHZ_ExecSetCmd(&hsubghz, txbuf[0], txbuf+1, sizeof(txbuf)-1);
 8000da8:	7839      	ldrb	r1, [r7, #0]
 8000daa:	463a      	mov	r2, r7
 8000dac:	3201      	adds	r2, #1
 8000dae:	2304      	movs	r3, #4
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <SetPa22dB+0x30>)
 8000db2:	f002 fee7 	bl	8003b84 <HAL_SUBGHZ_ExecSetCmd>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	08004988 	.word	0x08004988
 8000dc4:	200000b8 	.word	0x200000b8

08000dc8 <SetTxPower>:

void SetTxPower(int8_t powerdBm) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
    // Between -9 and 22
    uint8_t txbuf[3] = {0x8E, (uint8_t) powerdBm, 0x02};
 8000dd2:	238e      	movs	r3, #142	; 0x8e
 8000dd4:	733b      	strb	r3, [r7, #12]
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	737b      	strb	r3, [r7, #13]
 8000dda:	2302      	movs	r3, #2
 8000ddc:	73bb      	strb	r3, [r7, #14]
    HAL_SUBGHZ_ExecSetCmd(&hsubghz, txbuf[0], txbuf+1, sizeof(txbuf)-1);
 8000dde:	7b39      	ldrb	r1, [r7, #12]
 8000de0:	f107 020c 	add.w	r2, r7, #12
 8000de4:	3201      	adds	r2, #1
 8000de6:	2302      	movs	r3, #2
 8000de8:	4803      	ldr	r0, [pc, #12]	; (8000df8 <SetTxPower+0x30>)
 8000dea:	f002 fecb 	bl	8003b84 <HAL_SUBGHZ_ExecSetCmd>
}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000b8 	.word	0x200000b8

08000dfc <SetContinuousWave>:

void SetContinuousWave() {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
    uint8_t txbuf[1] = {0xD1};
 8000e02:	23d1      	movs	r3, #209	; 0xd1
 8000e04:	713b      	strb	r3, [r7, #4]
    HAL_SUBGHZ_ExecSetCmd(&hsubghz, txbuf[0], txbuf, 0);
 8000e06:	7939      	ldrb	r1, [r7, #4]
 8000e08:	1d3a      	adds	r2, r7, #4
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	4803      	ldr	r0, [pc, #12]	; (8000e1c <SetContinuousWave+0x20>)
 8000e0e:	f002 feb9 	bl	8003b84 <HAL_SUBGHZ_ExecSetCmd>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200000b8 	.word	0x200000b8

08000e20 <SetTxInfinitePreamble>:

void SetTxInfinitePreamble() {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
    uint8_t txbuf[1] = {0xD2};
 8000e26:	23d2      	movs	r3, #210	; 0xd2
 8000e28:	713b      	strb	r3, [r7, #4]
    HAL_SUBGHZ_ExecSetCmd(&hsubghz, txbuf[0], txbuf, 0);
 8000e2a:	7939      	ldrb	r1, [r7, #4]
 8000e2c:	1d3a      	adds	r2, r7, #4
 8000e2e:	2300      	movs	r3, #0
 8000e30:	4803      	ldr	r0, [pc, #12]	; (8000e40 <SetTxInfinitePreamble+0x20>)
 8000e32:	f002 fea7 	bl	8003b84 <HAL_SUBGHZ_ExecSetCmd>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200000b8 	.word	0x200000b8
 8000e44:	00000000 	.word	0x00000000

08000e48 <SetModulationParamsFSK>:
void SetModulationParamsLora(const uint8_t params[4]) {
    uint8_t txbuf[5] = {0x8B, params[0], params[1], params[2], params[3]};
    HAL_SUBGHZ_ExecSetCmd(&hsubghz, txbuf[0], txbuf+1, sizeof(txbuf)-1);
}

void SetModulationParamsFSK(uint32_t bitrate, uint8_t pulseshape, uint8_t bandwidth, uint32_t freq_dev) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	460b      	mov	r3, r1
 8000e54:	72fb      	strb	r3, [r7, #11]
 8000e56:	4613      	mov	r3, r2
 8000e58:	72bb      	strb	r3, [r7, #10]
    uint32_t BR = 32 * 32e6 / bitrate;
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f7ff face 	bl	80003fc <__aeabi_ui2d>
 8000e60:	4602      	mov	r2, r0
 8000e62:	460b      	mov	r3, r1
 8000e64:	a122      	add	r1, pc, #136	; (adr r1, 8000ef0 <SetModulationParamsFSK+0xa8>)
 8000e66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e6a:	f7ff fc6b 	bl	8000744 <__aeabi_ddiv>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4610      	mov	r0, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	f7ff fd4d 	bl	8000914 <__aeabi_d2uiz>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t fdev = (uint32_t) (freq_dev * 1.048576L); // 2^25/32e6 = 1.048576
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff fabc 	bl	80003fc <__aeabi_ui2d>
 8000e84:	a31c      	add	r3, pc, #112	; (adr r3, 8000ef8 <SetModulationParamsFSK+0xb0>)
 8000e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8a:	f7ff fb31 	bl	80004f0 <__aeabi_dmul>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	4610      	mov	r0, r2
 8000e94:	4619      	mov	r1, r3
 8000e96:	f7ff fd3d 	bl	8000914 <__aeabi_d2uiz>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	623b      	str	r3, [r7, #32]
    uint8_t txbuf[9] = {0x8B, (BR & 0x00FF0000) >> 16, (BR & 0x0000FF00) >> 8, BR & 0x000000FF, pulseshape, bandwidth, (fdev & 0x00FF0000) >> 16, (fdev & 0x0000FF00) >> 8, fdev & 0x000000FF};
 8000e9e:	238b      	movs	r3, #139	; 0x8b
 8000ea0:	753b      	strb	r3, [r7, #20]
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	0c1b      	lsrs	r3, r3, #16
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	757b      	strb	r3, [r7, #21]
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	75bb      	strb	r3, [r7, #22]
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	75fb      	strb	r3, [r7, #23]
 8000eb8:	7afb      	ldrb	r3, [r7, #11]
 8000eba:	763b      	strb	r3, [r7, #24]
 8000ebc:	7abb      	ldrb	r3, [r7, #10]
 8000ebe:	767b      	strb	r3, [r7, #25]
 8000ec0:	6a3b      	ldr	r3, [r7, #32]
 8000ec2:	0c1b      	lsrs	r3, r3, #16
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	76bb      	strb	r3, [r7, #26]
 8000ec8:	6a3b      	ldr	r3, [r7, #32]
 8000eca:	0a1b      	lsrs	r3, r3, #8
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	76fb      	strb	r3, [r7, #27]
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	773b      	strb	r3, [r7, #28]
    HAL_SUBGHZ_ExecSetCmd(&hsubghz, txbuf[0], txbuf+1, sizeof(txbuf)-1);
 8000ed6:	7d39      	ldrb	r1, [r7, #20]
 8000ed8:	f107 0214 	add.w	r2, r7, #20
 8000edc:	3201      	adds	r2, #1
 8000ede:	2308      	movs	r3, #8
 8000ee0:	4807      	ldr	r0, [pc, #28]	; (8000f00 <SetModulationParamsFSK+0xb8>)
 8000ee2:	f002 fe4f 	bl	8003b84 <HAL_SUBGHZ_ExecSetCmd>
}
 8000ee6:	bf00      	nop
 8000ee8:	3728      	adds	r7, #40	; 0x28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	00000000 	.word	0x00000000
 8000ef4:	41ce8480 	.word	0x41ce8480
 8000ef8:	a0b5ed8d 	.word	0xa0b5ed8d
 8000efc:	3ff0c6f7 	.word	0x3ff0c6f7
 8000f00:	200000b8 	.word	0x200000b8

08000f04 <FSKBeep>:

    HAL_SUBGHZ_ExecSetCmd(&hsubghz, txbuf[0], txbuf+1, sizeof(txbuf)-1);
}


void FSKBeep(int8_t powerdBm, uint32_t toneHz, uint32_t lengthMs) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	73fb      	strb	r3, [r7, #15]
    // assume in standbyXOSC already.
    HAL_Delay(1);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f000 fccc 	bl	80018b0 <HAL_Delay>
    SetTxPower(powerdBm);
 8000f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff53 	bl	8000dc8 <SetTxPower>
    SetModulationParamsFSK(toneHz*2,    0x09,     0x1E,      2500);
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	0058      	lsls	r0, r3, #1
 8000f26:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000f2a:	221e      	movs	r2, #30
 8000f2c:	2109      	movs	r1, #9
 8000f2e:	f7ff ff8b 	bl	8000e48 <SetModulationParamsFSK>
    HAL_Delay(5);
 8000f32:	2005      	movs	r0, #5
 8000f34:	f000 fcbc 	bl	80018b0 <HAL_Delay>
    SetTxInfinitePreamble();
 8000f38:	f7ff ff72 	bl	8000e20 <SetTxInfinitePreamble>
    HAL_Delay(lengthMs);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 fcb7 	bl	80018b0 <HAL_Delay>
    SetStandbyXOSC();
 8000f42:	f7ff feaf 	bl	8000ca4 <SetStandbyXOSC>
    HAL_Delay(5);
 8000f46:	2005      	movs	r0, #5
 8000f48:	f000 fcb2 	bl	80018b0 <HAL_Delay>
}
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <CWBeep>:

void CWBeep(int8_t powerdBm, uint32_t lengthMs) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(1);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f000 fca5 	bl	80018b0 <HAL_Delay>
    SetTxPower(powerdBm);
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff2c 	bl	8000dc8 <SetTxPower>
    HAL_Delay(5);
 8000f70:	2005      	movs	r0, #5
 8000f72:	f000 fc9d 	bl	80018b0 <HAL_Delay>
    SetContinuousWave();
 8000f76:	f7ff ff41 	bl	8000dfc <SetContinuousWave>
    HAL_Delay(lengthMs);
 8000f7a:	6838      	ldr	r0, [r7, #0]
 8000f7c:	f000 fc98 	bl	80018b0 <HAL_Delay>
    SetStandbyXOSC();
 8000f80:	f7ff fe90 	bl	8000ca4 <SetStandbyXOSC>
    HAL_Delay(5);
 8000f84:	2005      	movs	r0, #5
 8000f86:	f000 fc93 	bl	80018b0 <HAL_Delay>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <play_morse_char>:

// https://en.wikipedia.org/wiki/Morse_code#/media/File:International_Morse_Code.svg
uint32_t morse_unit_ms = 100;
int8_t morse_power = 10;

void play_morse_char(uint8_t ascii_letter, bool use_cw) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	71bb      	strb	r3, [r7, #6]
    uint8_t morse_code = 0b11111111;
 8000fa4:	23ff      	movs	r3, #255	; 0xff
 8000fa6:	73fb      	strb	r3, [r7, #15]
    if (ascii_letter > 31 && ascii_letter < 123) {
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2b1f      	cmp	r3, #31
 8000fac:	d907      	bls.n	8000fbe <play_morse_char+0x2a>
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2b7a      	cmp	r3, #122	; 0x7a
 8000fb2:	d804      	bhi.n	8000fbe <play_morse_char+0x2a>
        morse_code = morse_chars[ascii_letter - 32];
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	3b20      	subs	r3, #32
 8000fb8:	4a40      	ldr	r2, [pc, #256]	; (80010bc <play_morse_char+0x128>)
 8000fba:	5cd3      	ldrb	r3, [r2, r3]
 8000fbc:	73fb      	strb	r3, [r7, #15]
    }

    // space
    if (morse_code == 0b11111111) {
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	2bff      	cmp	r3, #255	; 0xff
 8000fc2:	d10e      	bne.n	8000fe2 <play_morse_char+0x4e>
        if (use_cw) {
 8000fc4:	79bb      	ldrb	r3, [r7, #6]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d005      	beq.n	8000fd6 <play_morse_char+0x42>
            HAL_Delay(morse_unit_ms);
 8000fca:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <play_morse_char+0x12c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 fc6e 	bl	80018b0 <HAL_Delay>
        } else {
            //FSKBeep(morse_power, 750, morse_unit_ms);
            HAL_Delay(morse_unit_ms);
        }
        return;
 8000fd4:	e06f      	b.n	80010b6 <play_morse_char+0x122>
            HAL_Delay(morse_unit_ms);
 8000fd6:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <play_morse_char+0x12c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fc68 	bl	80018b0 <HAL_Delay>
        return;
 8000fe0:	e069      	b.n	80010b6 <play_morse_char+0x122>
    }
    uint8_t terminatelen = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73bb      	strb	r3, [r7, #14]
    for (uint8_t idx = 0; idx < 8; idx++) {
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	737b      	strb	r3, [r7, #13]
 8000fea:	e00d      	b.n	8001008 <play_morse_char+0x74>
        if (morse_code & (1 << idx)) {
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	7b7b      	ldrb	r3, [r7, #13]
 8000ff0:	fa42 f303 	asr.w	r3, r2, r3
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d002      	beq.n	8001002 <play_morse_char+0x6e>
            terminatelen = idx;
 8000ffc:	7b7b      	ldrb	r3, [r7, #13]
 8000ffe:	73bb      	strb	r3, [r7, #14]
            break;
 8001000:	e005      	b.n	800100e <play_morse_char+0x7a>
    for (uint8_t idx = 0; idx < 8; idx++) {
 8001002:	7b7b      	ldrb	r3, [r7, #13]
 8001004:	3301      	adds	r3, #1
 8001006:	737b      	strb	r3, [r7, #13]
 8001008:	7b7b      	ldrb	r3, [r7, #13]
 800100a:	2b07      	cmp	r3, #7
 800100c:	d9ee      	bls.n	8000fec <play_morse_char+0x58>
        }
    }

    for (uint8_t i = 7; i > terminatelen; i--) {
 800100e:	2307      	movs	r3, #7
 8001010:	733b      	strb	r3, [r7, #12]
 8001012:	e04c      	b.n	80010ae <play_morse_char+0x11a>
        if (morse_code & (1 << i)) {
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	7b3b      	ldrb	r3, [r7, #12]
 8001018:	fa42 f303 	asr.w	r3, r2, r3
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	2b00      	cmp	r3, #0
 8001022:	d01c      	beq.n	800105e <play_morse_char+0xca>
            // make dat
            //printf("-");
            if (use_cw) {
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00b      	beq.n	8001042 <play_morse_char+0xae>
                CWBeep(morse_power, morse_unit_ms * 3);
 800102a:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <play_morse_char+0x130>)
 800102c:	f993 0000 	ldrsb.w	r0, [r3]
 8001030:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <play_morse_char+0x12c>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff ff8a 	bl	8000f54 <CWBeep>
 8001040:	e024      	b.n	800108c <play_morse_char+0xf8>
            } else {
                FSKBeep(morse_power, 750, morse_unit_ms * 3);
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <play_morse_char+0x130>)
 8001044:	f993 0000 	ldrsb.w	r0, [r3]
 8001048:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <play_morse_char+0x12c>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4613      	mov	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4413      	add	r3, r2
 8001052:	461a      	mov	r2, r3
 8001054:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001058:	f7ff ff54 	bl	8000f04 <FSKBeep>
 800105c:	e016      	b.n	800108c <play_morse_char+0xf8>
            }
        } else {
            // make dit
            //printf(".");
            if (use_cw) {
 800105e:	79bb      	ldrb	r3, [r7, #6]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d009      	beq.n	8001078 <play_morse_char+0xe4>
                CWBeep(morse_power, morse_unit_ms);
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <play_morse_char+0x130>)
 8001066:	f993 3000 	ldrsb.w	r3, [r3]
 800106a:	4a15      	ldr	r2, [pc, #84]	; (80010c0 <play_morse_char+0x12c>)
 800106c:	6812      	ldr	r2, [r2, #0]
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff6f 	bl	8000f54 <CWBeep>
 8001076:	e009      	b.n	800108c <play_morse_char+0xf8>
            } else {
                FSKBeep(morse_power, 750, morse_unit_ms);
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <play_morse_char+0x130>)
 800107a:	f993 3000 	ldrsb.w	r3, [r3]
 800107e:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <play_morse_char+0x12c>)
 8001080:	6812      	ldr	r2, [r2, #0]
 8001082:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff3c 	bl	8000f04 <FSKBeep>
            }
        }

        // Make delay.
        if (use_cw) {
 800108c:	79bb      	ldrb	r3, [r7, #6]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <play_morse_char+0x10a>
            HAL_Delay(morse_unit_ms);
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <play_morse_char+0x12c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fc0a 	bl	80018b0 <HAL_Delay>
 800109c:	e004      	b.n	80010a8 <play_morse_char+0x114>
        } else {
            HAL_Delay(morse_unit_ms);
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <play_morse_char+0x12c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 fc04 	bl	80018b0 <HAL_Delay>
    for (uint8_t i = 7; i > terminatelen; i--) {
 80010a8:	7b3b      	ldrb	r3, [r7, #12]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	733b      	strb	r3, [r7, #12]
 80010ae:	7b3a      	ldrb	r2, [r7, #12]
 80010b0:	7bbb      	ldrb	r3, [r7, #14]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d8ae      	bhi.n	8001014 <play_morse_char+0x80>
            //CWBeep(morse_power, morse_unit_ms);
        }
    }
}
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	080049b8 	.word	0x080049b8
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000004 	.word	0x20000004

080010c8 <play_morse_word>:

void play_morse_word(uint8_t* letters, uint8_t len, bool use_cw) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
 80010d4:	4613      	mov	r3, r2
 80010d6:	70bb      	strb	r3, [r7, #2]
    for (uint8_t i = 0; i < len; i++) {
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e01f      	b.n	800111e <play_morse_word+0x56>
        play_morse_char(letters[i], use_cw);
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	4413      	add	r3, r2
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	78ba      	ldrb	r2, [r7, #2]
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff52 	bl	8000f94 <play_morse_char>

        // Space between letters
        if (use_cw) {
 80010f0:	78bb      	ldrb	r3, [r7, #2]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <play_morse_word+0x40>
            HAL_Delay(morse_unit_ms * 3);
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <play_morse_word+0x68>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	4613      	mov	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4413      	add	r3, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f000 fbd5 	bl	80018b0 <HAL_Delay>
 8001106:	e007      	b.n	8001118 <play_morse_word+0x50>
        } else {
            //CWBeep(morse_power, morse_unit_ms);
            HAL_Delay(morse_unit_ms * 3);
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <play_morse_word+0x68>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fbcc 	bl	80018b0 <HAL_Delay>
    for (uint8_t i = 0; i < len; i++) {
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	3301      	adds	r3, #1
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	429a      	cmp	r2, r3
 8001124:	d3db      	bcc.n	80010de <play_morse_word+0x16>
        }
    }
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000000 	.word	0x20000000
 8001134:	00000000 	.word	0x00000000

08001138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113e:	f000 fb41 	bl	80017c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001142:	f000 f87f 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001146:	f000 f99f 	bl	8001488 <MX_GPIO_Init>
  MX_ADC_Init();
 800114a:	f000 f8cf 	bl	80012ec <MX_ADC_Init>
  MX_SUBGHZ_Init();
 800114e:	f000 f93d 	bl	80013cc <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 8001152:	f000 f94d 	bl	80013f0 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001156:	f000 f917 	bl	8001388 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  //EE_Status ee_status = EE_OK;

  HAL_Delay(1000); // initial start
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f000 fba7 	bl	80018b0 <HAL_Delay>
  SetStandbyXOSC();
 8001162:	f7ff fd9f 	bl	8000ca4 <SetStandbyXOSC>
  HAL_Delay(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f000 fba2 	bl	80018b0 <HAL_Delay>
  SetPacketTypeLora();
 800116c:	f7ff fdae 	bl	8000ccc <SetPacketTypeLora>
  HAL_Delay(1);
 8001170:	2001      	movs	r0, #1
 8001172:	f000 fb9d 	bl	80018b0 <HAL_Delay>
  //SetPaLowPower();
  SetPa22dB();
 8001176:	f7ff fe0d 	bl	8000d94 <SetPa22dB>
  HAL_Delay(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f000 fb98 	bl	80018b0 <HAL_Delay>
  SetTxPower(-9);
 8001180:	f06f 0008 	mvn.w	r0, #8
 8001184:	f7ff fe20 	bl	8000dc8 <SetTxPower>
  HAL_Delay(1);
 8001188:	2001      	movs	r0, #1
 800118a:	f000 fb91 	bl	80018b0 <HAL_Delay>

  SetPacketTypeFSK();
 800118e:	f7ff fdb1 	bl	8000cf4 <SetPacketTypeFSK>

  SetModulationParamsFSK(2000,    0x09,     0x1E,      3000);
 8001192:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001196:	221e      	movs	r2, #30
 8001198:	2109      	movs	r1, #9
 800119a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800119e:	f7ff fe53 	bl	8000e48 <SetModulationParamsFSK>

  double center_freq = 446.14375;
 80011a2:	a325      	add	r3, pc, #148	; (adr r3, 8001238 <main+0x100>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	e9c7 2304 	strd	r2, r3, [r7, #16]

  SetRfFreq(ComputeRfFreq(center_freq));
 80011ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011b0:	f7ff fdb2 	bl	8000d18 <ComputeRfFreq>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fdc8 	bl	8000d4c <SetRfFreq>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c6:	f001 f8df 	bl	8002388 <HAL_GPIO_WritePin>
      FSKBeep(-9, 500, 200);
 80011ca:	22c8      	movs	r2, #200	; 0xc8
 80011cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011d0:	f06f 0008 	mvn.w	r0, #8
 80011d4:	f7ff fe96 	bl	8000f04 <FSKBeep>

      HAL_Delay(50);
 80011d8:	2032      	movs	r0, #50	; 0x32
 80011da:	f000 fb69 	bl	80018b0 <HAL_Delay>

      FSKBeep(2, 750, 200);
 80011de:	22c8      	movs	r2, #200	; 0xc8
 80011e0:	f240 21ee 	movw	r1, #750	; 0x2ee
 80011e4:	2002      	movs	r0, #2
 80011e6:	f7ff fe8d 	bl	8000f04 <FSKBeep>

      HAL_Delay(50);
 80011ea:	2032      	movs	r0, #50	; 0x32
 80011ec:	f000 fb60 	bl	80018b0 <HAL_Delay>

      FSKBeep(10, 1000, 200);
 80011f0:	22c8      	movs	r2, #200	; 0xc8
 80011f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011f6:	200a      	movs	r0, #10
 80011f8:	f7ff fe84 	bl	8000f04 <FSKBeep>
      HAL_Delay(50);
 80011fc:	2032      	movs	r0, #50	; 0x32
 80011fe:	f000 fb57 	bl	80018b0 <HAL_Delay>

      HAL_Delay(1000);
 8001202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001206:	f000 fb53 	bl	80018b0 <HAL_Delay>
      uint8_t callsign[] = "CALLSIGN";
 800120a:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <main+0x108>)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001210:	c303      	stmia	r3!, {r0, r1}
 8001212:	701a      	strb	r2, [r3, #0]
      play_morse_word(callsign, sizeof(callsign)-1, false);
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2200      	movs	r2, #0
 8001218:	2108      	movs	r1, #8
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff54 	bl	80010c8 <play_morse_word>

      HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122a:	f001 f8ad 	bl	8002388 <HAL_GPIO_WritePin>

      HAL_Delay(3000);
 800122e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001232:	f000 fb3d 	bl	80018b0 <HAL_Delay>
  {
 8001236:	e7c1      	b.n	80011bc <main+0x84>
 8001238:	cccccccd 	.word	0xcccccccd
 800123c:	407be24c 	.word	0x407be24c
 8001240:	08004990 	.word	0x08004990

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b09a      	sub	sp, #104	; 0x68
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	2248      	movs	r2, #72	; 0x48
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fb80 	bl	8004958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800126a:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <SystemClock_Config+0xa4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001272:	4a1d      	ldr	r2, [pc, #116]	; (80012e8 <SystemClock_Config+0xa4>)
 8001274:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <SystemClock_Config+0xa4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001286:	2301      	movs	r3, #1
 8001288:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800128a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV2;
 8001290:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001296:	2300      	movs	r3, #0
 8001298:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129a:	f107 0320 	add.w	r3, r7, #32
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 fb34 	bl	800290c <HAL_RCC_OscConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80012aa:	f000 f935 	bl	8001518 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80012ae:	234f      	movs	r3, #79	; 0x4f
 80012b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80012b2:	2302      	movs	r3, #2
 80012b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 80012b6:	23b0      	movs	r3, #176	; 0xb0
 80012b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV16;
 80012c2:	23b0      	movs	r3, #176	; 0xb0
 80012c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f001 fe9f 	bl	8003010 <HAL_RCC_ClockConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012d8:	f000 f91e 	bl	8001518 <Error_Handler>
  }

  /** Enable the HSE Prescaler
  */
  __HAL_RCC_HSE_DIV2_ENABLE();
 80012dc:	f7ff fcbc 	bl	8000c58 <LL_RCC_HSE_EnableDiv2>
}
 80012e0:	bf00      	nop
 80012e2:	3768      	adds	r7, #104	; 0x68
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	58000400 	.word	0x58000400

080012ec <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80012f0:	4b23      	ldr	r3, [pc, #140]	; (8001380 <MX_ADC_Init+0x94>)
 80012f2:	4a24      	ldr	r2, [pc, #144]	; (8001384 <MX_ADC_Init+0x98>)
 80012f4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012f6:	4b22      	ldr	r3, [pc, #136]	; (8001380 <MX_ADC_Init+0x94>)
 80012f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012fc:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <MX_ADC_Init+0x94>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001304:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <MX_ADC_Init+0x94>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800130a:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <MX_ADC_Init+0x94>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <MX_ADC_Init+0x94>)
 8001312:	2204      	movs	r2, #4
 8001314:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <MX_ADC_Init+0x94>)
 8001318:	2200      	movs	r2, #0
 800131a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <MX_ADC_Init+0x94>)
 800131e:	2200      	movs	r2, #0
 8001320:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001322:	4b17      	ldr	r3, [pc, #92]	; (8001380 <MX_ADC_Init+0x94>)
 8001324:	2200      	movs	r2, #0
 8001326:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001328:	4b15      	ldr	r3, [pc, #84]	; (8001380 <MX_ADC_Init+0x94>)
 800132a:	2201      	movs	r2, #1
 800132c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800132e:	4b14      	ldr	r3, [pc, #80]	; (8001380 <MX_ADC_Init+0x94>)
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <MX_ADC_Init+0x94>)
 8001338:	2200      	movs	r2, #0
 800133a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <MX_ADC_Init+0x94>)
 800133e:	2200      	movs	r2, #0
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <MX_ADC_Init+0x94>)
 8001344:	2200      	movs	r2, #0
 8001346:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <MX_ADC_Init+0x94>)
 800134c:	2200      	movs	r2, #0
 800134e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <MX_ADC_Init+0x94>)
 8001352:	2200      	movs	r2, #0
 8001354:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <MX_ADC_Init+0x94>)
 8001358:	2200      	movs	r2, #0
 800135a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <MX_ADC_Init+0x94>)
 800135e:	2200      	movs	r2, #0
 8001360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <MX_ADC_Init+0x94>)
 8001366:	2200      	movs	r2, #0
 8001368:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_ADC_Init+0x94>)
 800136c:	f000 fb44 	bl	80019f8 <HAL_ADC_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 8001376:	f000 f8cf 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000030 	.word	0x20000030
 8001384:	40012400 	.word	0x40012400

08001388 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <MX_CRC_Init+0x3c>)
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <MX_CRC_Init+0x40>)
 8001390:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_CRC_Init+0x3c>)
 8001394:	2200      	movs	r2, #0
 8001396:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <MX_CRC_Init+0x3c>)
 800139a:	2200      	movs	r2, #0
 800139c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_CRC_Init+0x3c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <MX_CRC_Init+0x3c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_CRC_Init+0x3c>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <MX_CRC_Init+0x3c>)
 80013b2:	f000 fd97 	bl	8001ee4 <HAL_CRC_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80013bc:	f000 f8ac 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000094 	.word	0x20000094
 80013c8:	40023000 	.word	0x40023000

080013cc <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
static void MX_SUBGHZ_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_SUBGHZ_Init+0x20>)
 80013d2:	2210      	movs	r2, #16
 80013d4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_SUBGHZ_Init+0x20>)
 80013d8:	f002 fb70 	bl	8003abc <HAL_SUBGHZ_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80013e2:	f000 f899 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200000b8 	.word	0x200000b8

080013f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <MX_USART2_UART_Init+0x90>)
 80013f6:	4a23      	ldr	r2, [pc, #140]	; (8001484 <MX_USART2_UART_Init+0x94>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <MX_USART2_UART_Init+0x90>)
 80013fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001400:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <MX_USART2_UART_Init+0x90>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_USART2_UART_Init+0x90>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <MX_USART2_UART_Init+0x90>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <MX_USART2_UART_Init+0x90>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <MX_USART2_UART_Init+0x90>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <MX_USART2_UART_Init+0x90>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_USART2_UART_Init+0x90>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_USART2_UART_Init+0x90>)
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_USART2_UART_Init+0x90>)
 8001434:	2200      	movs	r2, #0
 8001436:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001438:	4811      	ldr	r0, [pc, #68]	; (8001480 <MX_USART2_UART_Init+0x90>)
 800143a:	f002 fcec 	bl	8003e16 <HAL_UART_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001444:	f000 f868 	bl	8001518 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001448:	2100      	movs	r1, #0
 800144a:	480d      	ldr	r0, [pc, #52]	; (8001480 <MX_USART2_UART_Init+0x90>)
 800144c:	f003 f997 	bl	800477e <HAL_UARTEx_SetTxFifoThreshold>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001456:	f000 f85f 	bl	8001518 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800145a:	2100      	movs	r1, #0
 800145c:	4808      	ldr	r0, [pc, #32]	; (8001480 <MX_USART2_UART_Init+0x90>)
 800145e:	f003 f9cc 	bl	80047fa <HAL_UARTEx_SetRxFifoThreshold>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001468:	f000 f856 	bl	8001518 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800146c:	4804      	ldr	r0, [pc, #16]	; (8001480 <MX_USART2_UART_Init+0x90>)
 800146e:	f003 f94e 	bl	800470e <HAL_UARTEx_DisableFifoMode>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001478:	f000 f84e 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200000c4 	.word	0x200000c4
 8001484:	40004400 	.word	0x40004400

08001488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149c:	2002      	movs	r0, #2
 800149e:	f7ff fbe9 	bl	8000c74 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	2001      	movs	r0, #1
 80014a4:	f7ff fbe6 	bl	8000c74 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a8:	2080      	movs	r0, #128	; 0x80
 80014aa:	f7ff fbe3 	bl	8000c74 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b8:	f000 ff66 	bl	8002388 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CONF_440_Pin CONF_868_Pin */
  GPIO_InitStruct.Pin = CONF_440_Pin|CONF_868_Pin;
 80014bc:	2318      	movs	r3, #24
 80014be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	4619      	mov	r1, r3
 80014cc:	4810      	ldr	r0, [pc, #64]	; (8001510 <MX_GPIO_Init+0x88>)
 80014ce:	f000 fdfb 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80014d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d8:	2301      	movs	r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	4619      	mov	r1, r3
 80014e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ec:	f000 fdec 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT_Pin */
  GPIO_InitStruct.Pin = BOOT_Pin;
 80014f0:	2308      	movs	r3, #8
 80014f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	4619      	mov	r1, r3
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <MX_GPIO_Init+0x8c>)
 8001502:	f000 fde1 	bl	80020c8 <HAL_GPIO_Init>

}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	48000400 	.word	0x48000400
 8001514:	48001c00 	.word	0x48001c00

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001520:	e7fe      	b.n	8001520 <Error_Handler+0x8>

08001522 <LL_AHB1_GRP1_EnableClock>:
{
 8001522:	b480      	push	{r7}
 8001524:	b085      	sub	sp, #20
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800152a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800152e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4313      	orrs	r3, r2
 8001538:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800153a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4013      	ands	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr

08001552 <LL_AHB2_GRP1_EnableClock>:
{
 8001552:	b480      	push	{r7}
 8001554:	b085      	sub	sp, #20
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800155a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001560:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4313      	orrs	r3, r2
 8001568:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800156a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4013      	ands	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr

08001582 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001582:	b480      	push	{r7}
 8001584:	b085      	sub	sp, #20
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800158a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001590:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4313      	orrs	r3, r2
 8001598:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800159a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4013      	ands	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015a6:	68fb      	ldr	r3, [r7, #12]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr

080015b2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b085      	sub	sp, #20
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80015ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80015ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4013      	ands	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b085      	sub	sp, #20
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80015ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80015f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80015fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4013      	ands	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001606:	68fb      	ldr	r3, [r7, #12]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
	...

08001620 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a05      	ldr	r2, [pc, #20]	; (8001644 <HAL_ADC_MspInit+0x24>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d103      	bne.n	800163a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001632:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001636:	f7ff ffbc 	bl	80015b2 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40012400 	.word	0x40012400

08001648 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a05      	ldr	r2, [pc, #20]	; (800166c <HAL_CRC_MspInit+0x24>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d103      	bne.n	8001662 <HAL_CRC_MspInit+0x1a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800165a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800165e:	f7ff ff60 	bl	8001522 <LL_AHB1_GRP1_EnableClock>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023000 	.word	0x40023000

08001670 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001678:	2001      	movs	r0, #1
 800167a:	f7ff ffb2 	bl	80015e2 <LL_APB3_GRP1_EnableClock>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b096      	sub	sp, #88	; 0x58
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2238      	movs	r2, #56	; 0x38
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f003 f955 	bl	8004958 <memset>
  if(huart->Instance==USART2)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a17      	ldr	r2, [pc, #92]	; (8001710 <HAL_UART_MspInit+0x88>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d126      	bne.n	8001706 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016b8:	2302      	movs	r3, #2
 80016ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016bc:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80016c0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	4618      	mov	r0, r3
 80016c8:	f002 f844 	bl	8003754 <HAL_RCCEx_PeriphCLKConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016d2:	f7ff ff21 	bl	8001518 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80016da:	f7ff ff52 	bl	8001582 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	2001      	movs	r0, #1
 80016e0:	f7ff ff37 	bl	8001552 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016e4:	230c      	movs	r3, #12
 80016e6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016f4:	2307      	movs	r3, #7
 80016f6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016fc:	4619      	mov	r1, r3
 80016fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001702:	f000 fce1 	bl	80020c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001706:	bf00      	nop
 8001708:	3758      	adds	r7, #88	; 0x58
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40004400 	.word	0x40004400

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>

0800171a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <MemManage_Handler+0x4>

08001726 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <UsageFault_Handler+0x4>

08001732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr

0800174a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175a:	f000 f88d 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}

08001762 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
	...

08001770 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001770:	480d      	ldr	r0, [pc, #52]	; (80017a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001772:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001774:	f7ff fff5 	bl	8001762 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001778:	480c      	ldr	r0, [pc, #48]	; (80017ac <LoopForever+0x6>)
  ldr r1, =_edata
 800177a:	490d      	ldr	r1, [pc, #52]	; (80017b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800177c:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <LoopForever+0xe>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001780:	e002      	b.n	8001788 <LoopCopyDataInit>

08001782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001786:	3304      	adds	r3, #4

08001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800178c:	d3f9      	bcc.n	8001782 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001790:	4c0a      	ldr	r4, [pc, #40]	; (80017bc <LoopForever+0x16>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001794:	e001      	b.n	800179a <LoopFillZerobss>

08001796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001798:	3204      	adds	r2, #4

0800179a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800179c:	d3fb      	bcc.n	8001796 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800179e:	f003 f8b7 	bl	8004910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017a2:	f7ff fcc9 	bl	8001138 <main>

080017a6 <LoopForever>:

LoopForever:
    b LoopForever
 80017a6:	e7fe      	b.n	80017a6 <LoopForever>
  ldr   r0, =_estack
 80017a8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80017ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80017b4:	08004aec 	.word	0x08004aec
  ldr r2, =_sbss
 80017b8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80017bc:	2000015c 	.word	0x2000015c

080017c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <ADC_IRQHandler>
	...

080017c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ce:	2003      	movs	r0, #3
 80017d0:	f000 fb56 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80017d4:	f001 fde0 	bl	8003398 <HAL_RCC_GetHCLKFreq>
 80017d8:	4603      	mov	r3, r0
 80017da:	4a09      	ldr	r2, [pc, #36]	; (8001800 <HAL_Init+0x3c>)
 80017dc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017de:	200f      	movs	r0, #15
 80017e0:	f000 f810 	bl	8001804 <HAL_InitTick>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	71fb      	strb	r3, [r7, #7]
 80017ee:	e001      	b.n	80017f4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017f0:	f7ff ff0f 	bl	8001612 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017f4:	79fb      	ldrb	r3, [r7, #7]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000008 	.word	0x20000008

08001804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_InitTick+0x6c>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d024      	beq.n	8001862 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001818:	f001 fdbe 	bl	8003398 <HAL_RCC_GetHCLKFreq>
 800181c:	4602      	mov	r2, r0
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_InitTick+0x6c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	4619      	mov	r1, r3
 8001824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001828:	fbb3 f3f1 	udiv	r3, r3, r1
 800182c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001830:	4618      	mov	r0, r3
 8001832:	f000 fb4a 	bl	8001eca <HAL_SYSTICK_Config>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10f      	bne.n	800185c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b0f      	cmp	r3, #15
 8001840:	d809      	bhi.n	8001856 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001842:	2200      	movs	r2, #0
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	f04f 30ff 	mov.w	r0, #4294967295
 800184a:	f000 fb24 	bl	8001e96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800184e:	4a09      	ldr	r2, [pc, #36]	; (8001874 <HAL_InitTick+0x70>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	e007      	b.n	8001866 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
 800185a:	e004      	b.n	8001866 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
 8001860:	e001      	b.n	8001866 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000010 	.word	0x20000010
 8001874:	2000000c 	.word	0x2000000c

08001878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_IncTick+0x1c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_IncTick+0x20>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a03      	ldr	r2, [pc, #12]	; (8001898 <HAL_IncTick+0x20>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	20000010 	.word	0x20000010
 8001898:	20000158 	.word	0x20000158

0800189c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b02      	ldr	r3, [pc, #8]	; (80018ac <HAL_GetTick+0x10>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	20000158 	.word	0x20000158

080018b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b8:	f7ff fff0 	bl	800189c <HAL_GetTick>
 80018bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c8:	d005      	beq.n	80018d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_Delay+0x44>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d6:	bf00      	nop
 80018d8:	f7ff ffe0 	bl	800189c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d8f7      	bhi.n	80018d8 <HAL_Delay+0x28>
  {
  }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000010 	.word	0x20000010

080018f8 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	2107      	movs	r1, #7
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	401a      	ands	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	431a      	orrs	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800192a:	bf00      	nop
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2107      	movs	r1, #7
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001956:	fa22 f303 	lsr.w	r3, r2, r3
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001974:	f023 0317 	bic.w	r3, r3, #23
 8001978:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800199e:	d101      	bne.n	80019a4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <LL_ADC_IsEnabled+0x18>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <LL_ADC_IsEnabled+0x1a>
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d101      	bne.n	80019ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e17e      	b.n	8001d18 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d109      	bne.n	8001a3c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff fdf9 	bl	8001620 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ffa2 	bl	800198a <LL_ADC_IsInternalRegulatorEnabled>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d115      	bne.n	8001a78 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff87 	bl	8001964 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a56:	4b9e      	ldr	r3, [pc, #632]	; (8001cd0 <HAL_ADC_Init+0x2d8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	099b      	lsrs	r3, r3, #6
 8001a5c:	4a9d      	ldr	r2, [pc, #628]	; (8001cd4 <HAL_ADC_Init+0x2dc>)
 8001a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a62:	099b      	lsrs	r3, r3, #6
 8001a64:	3301      	adds	r3, #1
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a6a:	e002      	b.n	8001a72 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1f9      	bne.n	8001a6c <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff84 	bl	800198a <LL_ADC_IsInternalRegulatorEnabled>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10d      	bne.n	8001aa4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8c:	f043 0210 	orr.w	r2, r3, #16
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff93 	bl	80019d4 <LL_ADC_REG_IsConversionOngoing>
 8001aae:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab4:	f003 0310 	and.w	r3, r3, #16
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f040 8124 	bne.w	8001d06 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f040 8120 	bne.w	8001d06 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ace:	f043 0202 	orr.w	r2, r3, #2
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ff68 	bl	80019b0 <LL_ADC_IsEnabled>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f040 80a7 	bne.w	8001c36 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7e1b      	ldrb	r3, [r3, #24]
 8001af0:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001af2:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7e5b      	ldrb	r3, [r3, #25]
 8001af8:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001afa:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7e9b      	ldrb	r3, [r3, #26]
 8001b00:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001b02:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b08:	2a00      	cmp	r2, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_ADC_Init+0x11a>
 8001b0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b10:	e000      	b.n	8001b14 <HAL_ADC_Init+0x11c>
 8001b12:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001b14:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001b1a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	da04      	bge.n	8001b2e <HAL_ADC_Init+0x136>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b2c:	e001      	b.n	8001b32 <HAL_ADC_Init+0x13a>
 8001b2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8001b32:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b3a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001b3c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d114      	bne.n	8001b78 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	7e9b      	ldrb	r3, [r3, #26]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d104      	bne.n	8001b60 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5c:	61bb      	str	r3, [r7, #24]
 8001b5e:	e00b      	b.n	8001b78 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	f043 0220 	orr.w	r2, r3, #32
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d009      	beq.n	8001b94 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8001b9e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	69b9      	ldr	r1, [r7, #24]
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d111      	bne.n	8001bee <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bd6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001bdc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001be2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <HAL_ADC_Init+0x2e0>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	6979      	ldr	r1, [r7, #20]
 8001bfe:	430b      	orrs	r3, r1
 8001c00:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001c0a:	d014      	beq.n	8001c36 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c14:	d00f      	beq.n	8001c36 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c1e:	d00a      	beq.n	8001c36 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8001c20:	4b2e      	ldr	r3, [pc, #184]	; (8001cdc <HAL_ADC_Init+0x2e4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001c30:	492a      	ldr	r1, [pc, #168]	; (8001cdc <HAL_ADC_Init+0x2e4>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3e:	461a      	mov	r2, r3
 8001c40:	2100      	movs	r1, #0
 8001c42:	f7ff fe59 	bl	80018f8 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6818      	ldr	r0, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4923      	ldr	r1, [pc, #140]	; (8001ce0 <HAL_ADC_Init+0x2e8>)
 8001c52:	f7ff fe51 	bl	80018f8 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d108      	bne.n	8001c70 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f062 020f 	orn	r2, r2, #15
 8001c6c:	629a      	str	r2, [r3, #40]	; 0x28
 8001c6e:	e017      	b.n	8001ca0 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c78:	d112      	bne.n	8001ca0 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	f003 031c 	and.w	r3, r3, #28
 8001c8c:	f06f 020f 	mvn.w	r2, #15
 8001c90:	fa02 f103 	lsl.w	r1, r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fe44 	bl	8001934 <LL_ADC_GetSamplingTimeCommonChannels>
 8001cac:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d116      	bne.n	8001ce4 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	f023 0303 	bic.w	r3, r3, #3
 8001cc4:	f043 0201 	orr.w	r2, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ccc:	e023      	b.n	8001d16 <HAL_ADC_Init+0x31e>
 8001cce:	bf00      	nop
 8001cd0:	20000008 	.word	0x20000008
 8001cd4:	053e2d63 	.word	0x053e2d63
 8001cd8:	1ffffc02 	.word	0x1ffffc02
 8001cdc:	40012708 	.word	0x40012708
 8001ce0:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	f023 0312 	bic.w	r3, r3, #18
 8001cec:	f043 0210 	orr.w	r2, r3, #16
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf8:	f043 0201 	orr.w	r2, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001d04:	e007      	b.n	8001d16 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	f043 0210 	orr.w	r2, r3, #16
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8001d16:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3720      	adds	r7, #32
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d52:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	60d3      	str	r3, [r2, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <__NVIC_GetPriorityGrouping+0x18>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 0307 	and.w	r3, r3, #7
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	; (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	; (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f7ff ff90 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff49 	bl	8001d20 <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea4:	f7ff ff60 	bl	8001d68 <__NVIC_GetPriorityGrouping>
 8001ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	6978      	ldr	r0, [r7, #20]
 8001eb0:	f7ff ff92 	bl	8001dd8 <NVIC_EncodePriority>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff61 	bl	8001d84 <__NVIC_SetPriority>
}
 8001ec2:	bf00      	nop
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ffb2 	bl	8001e3c <SysTick_Config>
 8001ed8:	4603      	mov	r3, r0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e054      	b.n	8001fa0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	7f5b      	ldrb	r3, [r3, #29]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d105      	bne.n	8001f0c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff fb9e 	bl	8001648 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	791b      	ldrb	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10c      	bne.n	8001f34 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a22      	ldr	r2, [pc, #136]	; (8001fa8 <HAL_CRC_Init+0xc4>)
 8001f20:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0218 	bic.w	r2, r2, #24
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	e00c      	b.n	8001f4e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6899      	ldr	r1, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f834 	bl	8001fac <HAL_CRCEx_Polynomial_Set>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e028      	b.n	8001fa0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	795b      	ldrb	r3, [r3, #5]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d105      	bne.n	8001f62 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5e:	611a      	str	r2, [r3, #16]
 8001f60:	e004      	b.n	8001f6c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6912      	ldr	r2, [r2, #16]
 8001f6a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699a      	ldr	r2, [r3, #24]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	04c11db7 	.word	0x04c11db7

08001fac <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001fbc:	231f      	movs	r3, #31
 8001fbe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d102      	bne.n	8001fd0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	75fb      	strb	r3, [r7, #23]
 8001fce:	e063      	b.n	8002098 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001fd0:	bf00      	nop
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1e5a      	subs	r2, r3, #1
 8001fd6:	613a      	str	r2, [r7, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d009      	beq.n	8001ff0 <HAL_CRCEx_Polynomial_Set+0x44>
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	f003 031f 	and.w	r3, r3, #31
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b18      	cmp	r3, #24
 8001ff4:	d846      	bhi.n	8002084 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001ff6:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <HAL_CRCEx_Polynomial_Set+0x50>)
 8001ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffc:	0800208b 	.word	0x0800208b
 8002000:	08002085 	.word	0x08002085
 8002004:	08002085 	.word	0x08002085
 8002008:	08002085 	.word	0x08002085
 800200c:	08002085 	.word	0x08002085
 8002010:	08002085 	.word	0x08002085
 8002014:	08002085 	.word	0x08002085
 8002018:	08002085 	.word	0x08002085
 800201c:	08002079 	.word	0x08002079
 8002020:	08002085 	.word	0x08002085
 8002024:	08002085 	.word	0x08002085
 8002028:	08002085 	.word	0x08002085
 800202c:	08002085 	.word	0x08002085
 8002030:	08002085 	.word	0x08002085
 8002034:	08002085 	.word	0x08002085
 8002038:	08002085 	.word	0x08002085
 800203c:	0800206d 	.word	0x0800206d
 8002040:	08002085 	.word	0x08002085
 8002044:	08002085 	.word	0x08002085
 8002048:	08002085 	.word	0x08002085
 800204c:	08002085 	.word	0x08002085
 8002050:	08002085 	.word	0x08002085
 8002054:	08002085 	.word	0x08002085
 8002058:	08002085 	.word	0x08002085
 800205c:	08002061 	.word	0x08002061
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	2b06      	cmp	r3, #6
 8002064:	d913      	bls.n	800208e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800206a:	e010      	b.n	800208e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	2b07      	cmp	r3, #7
 8002070:	d90f      	bls.n	8002092 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002076:	e00c      	b.n	8002092 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	2b0f      	cmp	r3, #15
 800207c:	d90b      	bls.n	8002096 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002082:	e008      	b.n	8002096 <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	75fb      	strb	r3, [r7, #23]
        break;
 8002088:	e006      	b.n	8002098 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800208a:	bf00      	nop
 800208c:	e004      	b.n	8002098 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800208e:	bf00      	nop
 8002090:	e002      	b.n	8002098 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002092:	bf00      	nop
 8002094:	e000      	b.n	8002098 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002096:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002098:	7dfb      	ldrb	r3, [r7, #23]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10d      	bne.n	80020ba <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f023 0118 	bic.w	r1, r3, #24
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80020ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop

080020c8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d6:	e140      	b.n	800235a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2101      	movs	r1, #1
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	fa01 f303 	lsl.w	r3, r1, r3
 80020e4:	4013      	ands	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8132 	beq.w	8002354 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d005      	beq.n	8002108 <HAL_GPIO_Init+0x40>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d130      	bne.n	800216a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	2203      	movs	r2, #3
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800213e:	2201      	movs	r2, #1
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	f003 0201 	and.w	r2, r3, #1
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b03      	cmp	r3, #3
 8002174:	d017      	beq.n	80021a6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	2203      	movs	r2, #3
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d123      	bne.n	80021fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	08da      	lsrs	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3208      	adds	r2, #8
 80021ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	220f      	movs	r2, #15
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4013      	ands	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	08da      	lsrs	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3208      	adds	r2, #8
 80021f4:	6939      	ldr	r1, [r7, #16]
 80021f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	2203      	movs	r2, #3
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 0203 	and.w	r2, r3, #3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 808c 	beq.w	8002354 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800223c:	4a4e      	ldr	r2, [pc, #312]	; (8002378 <HAL_GPIO_Init+0x2b0>)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	3302      	adds	r3, #2
 8002244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002248:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	2207      	movs	r2, #7
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002266:	d00d      	beq.n	8002284 <HAL_GPIO_Init+0x1bc>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a44      	ldr	r2, [pc, #272]	; (800237c <HAL_GPIO_Init+0x2b4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d007      	beq.n	8002280 <HAL_GPIO_Init+0x1b8>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a43      	ldr	r2, [pc, #268]	; (8002380 <HAL_GPIO_Init+0x2b8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d101      	bne.n	800227c <HAL_GPIO_Init+0x1b4>
 8002278:	2302      	movs	r3, #2
 800227a:	e004      	b.n	8002286 <HAL_GPIO_Init+0x1be>
 800227c:	2307      	movs	r3, #7
 800227e:	e002      	b.n	8002286 <HAL_GPIO_Init+0x1be>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_GPIO_Init+0x1be>
 8002284:	2300      	movs	r3, #0
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	f002 0203 	and.w	r2, r2, #3
 800228c:	0092      	lsls	r2, r2, #2
 800228e:	4093      	lsls	r3, r2
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002296:	4938      	ldr	r1, [pc, #224]	; (8002378 <HAL_GPIO_Init+0x2b0>)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	3302      	adds	r3, #2
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022a4:	4b37      	ldr	r3, [pc, #220]	; (8002384 <HAL_GPIO_Init+0x2bc>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022c8:	4a2e      	ldr	r2, [pc, #184]	; (8002384 <HAL_GPIO_Init+0x2bc>)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022ce:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <HAL_GPIO_Init+0x2bc>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022f2:	4a24      	ldr	r2, [pc, #144]	; (8002384 <HAL_GPIO_Init+0x2bc>)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80022f8:	4b22      	ldr	r3, [pc, #136]	; (8002384 <HAL_GPIO_Init+0x2bc>)
 80022fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022fe:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	43db      	mvns	r3, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800231e:	4a19      	ldr	r2, [pc, #100]	; (8002384 <HAL_GPIO_Init+0x2bc>)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002326:	4b17      	ldr	r3, [pc, #92]	; (8002384 <HAL_GPIO_Init+0x2bc>)
 8002328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800232c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800234c:	4a0d      	ldr	r2, [pc, #52]	; (8002384 <HAL_GPIO_Init+0x2bc>)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	3301      	adds	r3, #1
 8002358:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	f47f aeb7 	bne.w	80020d8 <HAL_GPIO_Init+0x10>
  }
}
 800236a:	bf00      	nop
 800236c:	bf00      	nop
 800236e:	371c      	adds	r7, #28
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40010000 	.word	0x40010000
 800237c:	48000400 	.word	0x48000400
 8002380:	48000800 	.word	0x48000800
 8002384:	58000800 	.word	0x58000800

08002388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	807b      	strh	r3, [r7, #2]
 8002394:	4613      	mov	r3, r2
 8002396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002398:	787b      	ldrb	r3, [r7, #1]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800239e:	887a      	ldrh	r2, [r7, #2]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023a4:	e002      	b.n	80023ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023a6:	887a      	ldrh	r2, [r7, #2]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
	...

080023b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a03      	ldr	r2, [pc, #12]	; (80023d0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6013      	str	r3, [r2, #0]
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	58000400 	.word	0x58000400

080023d4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <HAL_PWREx_GetVoltageRange+0x14>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	58000400 	.word	0x58000400

080023ec <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023fc:	d101      	bne.n	8002402 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	58000400 	.word	0x58000400

08002410 <LL_RCC_HSE_EnableTcxo>:
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800241e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002422:	6013      	str	r3, [r2, #0]
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <LL_RCC_HSE_DisableTcxo>:
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800243a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800243e:	6013      	str	r3, [r2, #0]
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800244c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800245a:	d101      	bne.n	8002460 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr

0800246a <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800246e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr

08002486 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800248a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002498:	6013      	str	r3, [r2, #0]
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80024a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024b4:	d101      	bne.n	80024ba <LL_RCC_HSE_IsReady+0x18>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <LL_RCC_HSE_IsReady+0x1a>
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80024c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d6:	6013      	str	r3, [r2, #0]
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80024e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024f2:	6013      	str	r3, [r2, #0]
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800250e:	d101      	bne.n	8002514 <LL_RCC_HSI_IsReady+0x18>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <LL_RCC_HSI_IsReady+0x1a>
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr

0800251e <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	061b      	lsls	r3, r3, #24
 8002534:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800254a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b02      	cmp	r3, #2
 8002558:	d101      	bne.n	800255e <LL_RCC_LSE_IsReady+0x18>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <LL_RCC_LSE_IsReady+0x1a>
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800256c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002574:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800258c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002594:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002598:	f023 0301 	bic.w	r3, r3, #1
 800259c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80025ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d101      	bne.n	80025c0 <LL_RCC_LSI_IsReady+0x18>
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <LL_RCC_LSI_IsReady+0x1a>
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr

080025ca <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80025ca:	b480      	push	{r7}
 80025cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80025ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6013      	str	r3, [r2, #0]
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80025ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025f4:	f023 0301 	bic.w	r3, r3, #1
 80025f8:	6013      	str	r3, [r2, #0]
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b02      	cmp	r3, #2
 8002612:	d101      	bne.n	8002618 <LL_RCC_MSI_IsReady+0x16>
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <LL_RCC_MSI_IsReady+0x18>
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b08      	cmp	r3, #8
 8002632:	d101      	bne.n	8002638 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800265c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002664:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	021b      	lsls	r3, r3, #8
 8002686:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800268a:	4313      	orrs	r3, r2
 800268c:	604b      	str	r3, [r1, #4]
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80026a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f023 0203 	bic.w	r2, r3, #3
 80026aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	608b      	str	r3, [r1, #8]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80026c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 030c 	and.w	r3, r3, #12
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80026dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	608b      	str	r3, [r1, #8]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr

080026fa <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002706:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800270a:	f023 020f 	bic.w	r2, r3, #15
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800272e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002738:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4313      	orrs	r3, r2
 8002740:	608b      	str	r3, [r1, #8]
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800275e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4313      	orrs	r3, r2
 8002766:	608b      	str	r3, [r1, #8]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800278c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002790:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80027a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80027bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80027d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027e0:	6013      	str	r3, [r2, #0]
}
 80027e2:	bf00      	nop
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80027ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027fc:	6013      	str	r3, [r2, #0]
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800280a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002814:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002818:	d101      	bne.n	800281e <LL_RCC_PLL_IsReady+0x18>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <LL_RCC_PLL_IsReady+0x1a>
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800282c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	0a1b      	lsrs	r3, r3, #8
 8002834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr

08002856 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800285a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002864:	4618      	mov	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0303 	and.w	r3, r3, #3
}
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr

08002882 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002894:	d101      	bne.n	800289a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80028a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b8:	d101      	bne.n	80028be <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80028cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028da:	d101      	bne.n	80028e0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028fc:	d101      	bne.n	8002902 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e36f      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800291e:	f7ff fece 	bl	80026be <LL_RCC_GetSysClkSource>
 8002922:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002924:	f7ff ffa2 	bl	800286c <LL_RCC_PLL_GetMainSource>
 8002928:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 80c4 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_RCC_OscConfig+0x3e>
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	2b0c      	cmp	r3, #12
 8002942:	d176      	bne.n	8002a32 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d173      	bne.n	8002a32 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e353      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800295a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_OscConfig+0x68>
 8002968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002972:	e006      	b.n	8002982 <HAL_RCC_OscConfig+0x76>
 8002974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002982:	4293      	cmp	r3, r2
 8002984:	d222      	bcs.n	80029cc <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fd3c 	bl	8003408 <RCC_SetFlashLatencyFromMSIRange>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e331      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800299a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029a4:	f043 0308 	orr.w	r3, r3, #8
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029bc:	4313      	orrs	r3, r2
 80029be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fe53 	bl	8002670 <LL_RCC_MSI_SetCalibTrimming>
 80029ca:	e021      	b.n	8002a10 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d6:	f043 0308 	orr.w	r3, r3, #8
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fe3a 	bl	8002670 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fd01 	bl	8003408 <RCC_SetFlashLatencyFromMSIRange>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e2f6      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a10:	f000 fcc2 	bl	8003398 <HAL_RCC_GetHCLKFreq>
 8002a14:	4603      	mov	r3, r0
 8002a16:	4aa7      	ldr	r2, [pc, #668]	; (8002cb4 <HAL_RCC_OscConfig+0x3a8>)
 8002a18:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002a1a:	4ba7      	ldr	r3, [pc, #668]	; (8002cb8 <HAL_RCC_OscConfig+0x3ac>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe fef0 	bl	8001804 <HAL_InitTick>
 8002a24:	4603      	mov	r3, r0
 8002a26:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d047      	beq.n	8002abe <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002a2e:	7cfb      	ldrb	r3, [r7, #19]
 8002a30:	e2e5      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d02c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a3a:	f7ff fdc6 	bl	80025ca <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a3e:	f7fe ff2d 	bl	800189c <HAL_GetTick>
 8002a42:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a46:	f7fe ff29 	bl	800189c <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e2d2      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002a58:	f7ff fdd3 	bl	8002602 <LL_RCC_MSI_IsReady>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f1      	beq.n	8002a46 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a6c:	f043 0308 	orr.w	r3, r3, #8
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a84:	4313      	orrs	r3, r2
 8002a86:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fdef 	bl	8002670 <LL_RCC_MSI_SetCalibTrimming>
 8002a92:	e015      	b.n	8002ac0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a94:	f7ff fda7 	bl	80025e6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a98:	f7fe ff00 	bl	800189c <HAL_GetTick>
 8002a9c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aa0:	f7fe fefc 	bl	800189c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e2a5      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ab2:	f7ff fda6 	bl	8002602 <LL_RCC_MSI_IsReady>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f1      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x194>
 8002abc:	e000      	b.n	8002ac0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002abe:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d058      	beq.n	8002b7e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d005      	beq.n	8002ade <HAL_RCC_OscConfig+0x1d2>
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	2b0c      	cmp	r3, #12
 8002ad6:	d108      	bne.n	8002aea <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d105      	bne.n	8002aea <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d14b      	bne.n	8002b7e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e289      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b08:	d102      	bne.n	8002b10 <HAL_RCC_OscConfig+0x204>
 8002b0a:	f7ff fcae 	bl	800246a <LL_RCC_HSE_Enable>
 8002b0e:	e00d      	b.n	8002b2c <HAL_RCC_OscConfig+0x220>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002b18:	d104      	bne.n	8002b24 <HAL_RCC_OscConfig+0x218>
 8002b1a:	f7ff fc79 	bl	8002410 <LL_RCC_HSE_EnableTcxo>
 8002b1e:	f7ff fca4 	bl	800246a <LL_RCC_HSE_Enable>
 8002b22:	e003      	b.n	8002b2c <HAL_RCC_OscConfig+0x220>
 8002b24:	f7ff fcaf 	bl	8002486 <LL_RCC_HSE_Disable>
 8002b28:	f7ff fc80 	bl	800242c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d012      	beq.n	8002b5a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7fe feb2 	bl	800189c <HAL_GetTick>
 8002b38:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7fe feae 	bl	800189c <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	; 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e257      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002b4e:	f7ff fca8 	bl	80024a2 <LL_RCC_HSE_IsReady>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f1      	beq.n	8002b3c <HAL_RCC_OscConfig+0x230>
 8002b58:	e011      	b.n	8002b7e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7fe fe9f 	bl	800189c <HAL_GetTick>
 8002b5e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b62:	f7fe fe9b 	bl	800189c <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b64      	cmp	r3, #100	; 0x64
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e244      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002b74:	f7ff fc95 	bl	80024a2 <LL_RCC_HSE_IsReady>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f1      	bne.n	8002b62 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d046      	beq.n	8002c18 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_OscConfig+0x290>
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	2b0c      	cmp	r3, #12
 8002b94:	d10e      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e22a      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fcb6 	bl	800251e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002bb2:	e031      	b.n	8002c18 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d019      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bbc:	f7ff fc82 	bl	80024c4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7fe fe6c 	bl	800189c <HAL_GetTick>
 8002bc4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc8:	f7fe fe68 	bl	800189c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e211      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002bda:	f7ff fc8f 	bl	80024fc <LL_RCC_HSI_IsReady>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f1      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fc98 	bl	800251e <LL_RCC_HSI_SetCalibTrimming>
 8002bee:	e013      	b.n	8002c18 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf0:	f7ff fc76 	bl	80024e0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fe52 	bl	800189c <HAL_GetTick>
 8002bf8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfc:	f7fe fe4e 	bl	800189c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e1f7      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002c0e:	f7ff fc75 	bl	80024fc <LL_RCC_HSI_IsReady>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1f1      	bne.n	8002bfc <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d06e      	beq.n	8002d02 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d056      	beq.n	8002cda <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c34:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69da      	ldr	r2, [r3, #28]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d031      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d006      	beq.n	8002c5c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e1d0      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d013      	beq.n	8002c8e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002c66:	f7ff fc8f 	bl	8002588 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c6a:	f7fe fe17 	bl	800189c <HAL_GetTick>
 8002c6e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c72:	f7fe fe13 	bl	800189c <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b11      	cmp	r3, #17
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e1bc      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002c84:	f7ff fc90 	bl	80025a8 <LL_RCC_LSI_IsReady>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f1      	bne.n	8002c72 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c96:	f023 0210 	bic.w	r2, r3, #16
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca8:	f7ff fc5e 	bl	8002568 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cac:	f7fe fdf6 	bl	800189c <HAL_GetTick>
 8002cb0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002cb2:	e00c      	b.n	8002cce <HAL_RCC_OscConfig+0x3c2>
 8002cb4:	20000008 	.word	0x20000008
 8002cb8:	2000000c 	.word	0x2000000c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cbc:	f7fe fdee 	bl	800189c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b11      	cmp	r3, #17
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e197      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002cce:	f7ff fc6b 	bl	80025a8 <LL_RCC_LSI_IsReady>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f1      	beq.n	8002cbc <HAL_RCC_OscConfig+0x3b0>
 8002cd8:	e013      	b.n	8002d02 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cda:	f7ff fc55 	bl	8002588 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cde:	f7fe fddd 	bl	800189c <HAL_GetTick>
 8002ce2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce6:	f7fe fdd9 	bl	800189c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b11      	cmp	r3, #17
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e182      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002cf8:	f7ff fc56 	bl	80025a8 <LL_RCC_LSI_IsReady>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f1      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80d8 	beq.w	8002ec0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002d10:	f7ff fb6c 	bl	80023ec <LL_PWR_IsEnabledBkUpAccess>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d113      	bne.n	8002d42 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002d1a:	f7ff fb4d 	bl	80023b8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1e:	f7fe fdbd 	bl	800189c <HAL_GetTick>
 8002d22:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d26:	f7fe fdb9 	bl	800189c <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e162      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002d38:	f7ff fb58 	bl	80023ec <LL_PWR_IsEnabledBkUpAccess>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f1      	beq.n	8002d26 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d07b      	beq.n	8002e42 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2b85      	cmp	r3, #133	; 0x85
 8002d50:	d003      	beq.n	8002d5a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2b05      	cmp	r3, #5
 8002d58:	d109      	bne.n	8002d6e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6e:	f7fe fd95 	bl	800189c <HAL_GetTick>
 8002d72:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8a:	f7fe fd87 	bl	800189c <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e12e      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002da0:	f7ff fbd1 	bl	8002546 <LL_RCC_LSE_IsReady>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0ef      	beq.n	8002d8a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	2b81      	cmp	r3, #129	; 0x81
 8002db0:	d003      	beq.n	8002dba <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b85      	cmp	r3, #133	; 0x85
 8002db8:	d121      	bne.n	8002dfe <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dba:	f7fe fd6f 	bl	800189c <HAL_GetTick>
 8002dbe:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fe fd61 	bl	800189c <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e108      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ec      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002dfc:	e060      	b.n	8002ec0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfe:	f7fe fd4d 	bl	800189c <HAL_GetTick>
 8002e02:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1a:	f7fe fd3f 	bl	800189c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e0e6      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1ec      	bne.n	8002e1a <HAL_RCC_OscConfig+0x50e>
 8002e40:	e03e      	b.n	8002ec0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e42:	f7fe fd2b 	bl	800189c <HAL_GetTick>
 8002e46:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e5c:	e00a      	b.n	8002e74 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5e:	f7fe fd1d 	bl	800189c <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e0c4      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ec      	bne.n	8002e5e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e84:	f7fe fd0a 	bl	800189c <HAL_GetTick>
 8002e88:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f7fe fcfc 	bl	800189c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e0a3      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002eb6:	f7ff fb46 	bl	8002546 <LL_RCC_LSE_IsReady>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ef      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 8099 	beq.w	8002ffc <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	2b0c      	cmp	r3, #12
 8002ece:	d06c      	beq.n	8002faa <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d14b      	bne.n	8002f70 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed8:	f7ff fc87 	bl	80027ea <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7fe fcde 	bl	800189c <HAL_GetTick>
 8002ee0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee4:	f7fe fcda 	bl	800189c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b0a      	cmp	r3, #10
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e083      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002ef6:	f7ff fc86 	bl	8002806 <LL_RCC_PLL_IsReady>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f1      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	4b40      	ldr	r3, [pc, #256]	; (8003008 <HAL_RCC_OscConfig+0x6fc>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f12:	4311      	orrs	r1, r2
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f18:	0212      	lsls	r2, r2, #8
 8002f1a:	4311      	orrs	r1, r2
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f20:	4311      	orrs	r1, r2
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f26:	4311      	orrs	r1, r2
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f36:	f7ff fc4a 	bl	80027ce <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f48:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4a:	f7fe fca7 	bl	800189c <HAL_GetTick>
 8002f4e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f52:	f7fe fca3 	bl	800189c <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b0a      	cmp	r3, #10
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e04c      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002f64:	f7ff fc4f 	bl	8002806 <LL_RCC_PLL_IsReady>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f1      	beq.n	8002f52 <HAL_RCC_OscConfig+0x646>
 8002f6e:	e045      	b.n	8002ffc <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f70:	f7ff fc3b 	bl	80027ea <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fe fc92 	bl	800189c <HAL_GetTick>
 8002f78:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7fe fc8e 	bl	800189c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b0a      	cmp	r3, #10
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e037      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002f8e:	f7ff fc3a 	bl	8002806 <LL_RCC_PLL_IsReady>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1f1      	bne.n	8002f7c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fa2:	4b1a      	ldr	r3, [pc, #104]	; (800300c <HAL_RCC_OscConfig+0x700>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60cb      	str	r3, [r1, #12]
 8002fa8:	e028      	b.n	8002ffc <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e023      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	f003 0203 	and.w	r2, r3, #3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d115      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d106      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3720      	adds	r7, #32
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	11c1808c 	.word	0x11c1808c
 800300c:	eefefffc 	.word	0xeefefffc

08003010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e10f      	b.n	8003244 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003024:	4b89      	ldr	r3, [pc, #548]	; (800324c <HAL_RCC_ClockConfig+0x23c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d91b      	bls.n	800306a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b86      	ldr	r3, [pc, #536]	; (800324c <HAL_RCC_ClockConfig+0x23c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 0207 	bic.w	r2, r3, #7
 800303a:	4984      	ldr	r1, [pc, #528]	; (800324c <HAL_RCC_ClockConfig+0x23c>)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003042:	f7fe fc2b 	bl	800189c <HAL_GetTick>
 8003046:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003048:	e008      	b.n	800305c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800304a:	f7fe fc27 	bl	800189c <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e0f3      	b.n	8003244 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800305c:	4b7b      	ldr	r3, [pc, #492]	; (800324c <HAL_RCC_ClockConfig+0x23c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d1ef      	bne.n	800304a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d016      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fb2a 	bl	80026d4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003080:	f7fe fc0c 	bl	800189c <HAL_GetTick>
 8003084:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003088:	f7fe fc08 	bl	800189c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e0d4      	b.n	8003244 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800309a:	f7ff fbf2 	bl	8002882 <LL_RCC_IsActiveFlag_HPRE>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f1      	beq.n	8003088 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d016      	beq.n	80030de <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fb20 	bl	80026fa <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030ba:	f7fe fbef 	bl	800189c <HAL_GetTick>
 80030be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80030c2:	f7fe fbeb 	bl	800189c <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e0b7      	b.n	8003244 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80030d4:	f7ff fbe6 	bl	80028a4 <LL_RCC_IsActiveFlag_SHDHPRE>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f1      	beq.n	80030c2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d016      	beq.n	8003118 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff fb19 	bl	8002726 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030f4:	f7fe fbd2 	bl	800189c <HAL_GetTick>
 80030f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80030fc:	f7fe fbce 	bl	800189c <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e09a      	b.n	8003244 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800310e:	f7ff fbdb 	bl	80028c8 <LL_RCC_IsActiveFlag_PPRE1>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f1      	beq.n	80030fc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d017      	beq.n	8003154 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fb0e 	bl	800274c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003130:	f7fe fbb4 	bl	800189c <HAL_GetTick>
 8003134:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003136:	e008      	b.n	800314a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003138:	f7fe fbb0 	bl	800189c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e07c      	b.n	8003244 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800314a:	f7ff fbce 	bl	80028ea <LL_RCC_IsActiveFlag_PPRE2>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f1      	beq.n	8003138 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d043      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b02      	cmp	r3, #2
 8003166:	d106      	bne.n	8003176 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003168:	f7ff f99b 	bl	80024a2 <LL_RCC_HSE_IsReady>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d11e      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e066      	b.n	8003244 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b03      	cmp	r3, #3
 800317c:	d106      	bne.n	800318c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800317e:	f7ff fb42 	bl	8002806 <LL_RCC_PLL_IsReady>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d113      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e05b      	b.n	8003244 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003194:	f7ff fa35 	bl	8002602 <LL_RCC_MSI_IsReady>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d108      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e050      	b.n	8003244 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80031a2:	f7ff f9ab 	bl	80024fc <LL_RCC_HSI_IsReady>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e049      	b.n	8003244 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fa6f 	bl	8002698 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031ba:	f7fe fb6f 	bl	800189c <HAL_GetTick>
 80031be:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c0:	e00a      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c2:	f7fe fb6b 	bl	800189c <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e035      	b.n	8003244 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d8:	f7ff fa71 	bl	80026be <LL_RCC_GetSysClkSource>
 80031dc:	4602      	mov	r2, r0
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d1ec      	bne.n	80031c2 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031e8:	4b18      	ldr	r3, [pc, #96]	; (800324c <HAL_RCC_ClockConfig+0x23c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d21b      	bcs.n	800322e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b15      	ldr	r3, [pc, #84]	; (800324c <HAL_RCC_ClockConfig+0x23c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 0207 	bic.w	r2, r3, #7
 80031fe:	4913      	ldr	r1, [pc, #76]	; (800324c <HAL_RCC_ClockConfig+0x23c>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003206:	f7fe fb49 	bl	800189c <HAL_GetTick>
 800320a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320c:	e008      	b.n	8003220 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800320e:	f7fe fb45 	bl	800189c <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e011      	b.n	8003244 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003220:	4b0a      	ldr	r3, [pc, #40]	; (800324c <HAL_RCC_ClockConfig+0x23c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d1ef      	bne.n	800320e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800322e:	f000 f8b3 	bl	8003398 <HAL_RCC_GetHCLKFreq>
 8003232:	4603      	mov	r3, r0
 8003234:	4a06      	ldr	r2, [pc, #24]	; (8003250 <HAL_RCC_ClockConfig+0x240>)
 8003236:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7fe fae1 	bl	8001804 <HAL_InitTick>
 8003242:	4603      	mov	r3, r0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	58004000 	.word	0x58004000
 8003250:	20000008 	.word	0x20000008
 8003254:	2000000c 	.word	0x2000000c

08003258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003258:	b590      	push	{r4, r7, lr}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003266:	f7ff fa2a 	bl	80026be <LL_RCC_GetSysClkSource>
 800326a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800326c:	f7ff fafe 	bl	800286c <LL_RCC_PLL_GetMainSource>
 8003270:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x2c>
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b0c      	cmp	r3, #12
 800327c:	d139      	bne.n	80032f2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d136      	bne.n	80032f2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003284:	f7ff f9cd 	bl	8002622 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d115      	bne.n	80032ba <HAL_RCC_GetSysClockFreq+0x62>
 800328e:	f7ff f9c8 	bl	8002622 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003292:	4603      	mov	r3, r0
 8003294:	2b01      	cmp	r3, #1
 8003296:	d106      	bne.n	80032a6 <HAL_RCC_GetSysClockFreq+0x4e>
 8003298:	f7ff f9d3 	bl	8002642 <LL_RCC_MSI_GetRange>
 800329c:	4603      	mov	r3, r0
 800329e:	0a1b      	lsrs	r3, r3, #8
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	e005      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x5a>
 80032a6:	f7ff f9d7 	bl	8002658 <LL_RCC_MSI_GetRangeAfterStandby>
 80032aa:	4603      	mov	r3, r0
 80032ac:	0a1b      	lsrs	r3, r3, #8
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	4a36      	ldr	r2, [pc, #216]	; (800338c <HAL_RCC_GetSysClockFreq+0x134>)
 80032b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b8:	e014      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x8c>
 80032ba:	f7ff f9b2 	bl	8002622 <LL_RCC_MSI_IsEnabledRangeSelect>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d106      	bne.n	80032d2 <HAL_RCC_GetSysClockFreq+0x7a>
 80032c4:	f7ff f9bd 	bl	8002642 <LL_RCC_MSI_GetRange>
 80032c8:	4603      	mov	r3, r0
 80032ca:	091b      	lsrs	r3, r3, #4
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	e005      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x86>
 80032d2:	f7ff f9c1 	bl	8002658 <LL_RCC_MSI_GetRangeAfterStandby>
 80032d6:	4603      	mov	r3, r0
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	4a2b      	ldr	r2, [pc, #172]	; (800338c <HAL_RCC_GetSysClockFreq+0x134>)
 80032e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d115      	bne.n	8003318 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80032f0:	e012      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d102      	bne.n	80032fe <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032f8:	4b25      	ldr	r3, [pc, #148]	; (8003390 <HAL_RCC_GetSysClockFreq+0x138>)
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	e00c      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d109      	bne.n	8003318 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003304:	f7ff f8a0 	bl	8002448 <LL_RCC_HSE_IsEnabledDiv2>
 8003308:	4603      	mov	r3, r0
 800330a:	2b01      	cmp	r3, #1
 800330c:	d102      	bne.n	8003314 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800330e:	4b20      	ldr	r3, [pc, #128]	; (8003390 <HAL_RCC_GetSysClockFreq+0x138>)
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	e001      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003314:	4b1f      	ldr	r3, [pc, #124]	; (8003394 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003316:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003318:	f7ff f9d1 	bl	80026be <LL_RCC_GetSysClkSource>
 800331c:	4603      	mov	r3, r0
 800331e:	2b0c      	cmp	r3, #12
 8003320:	d12f      	bne.n	8003382 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003322:	f7ff faa3 	bl	800286c <LL_RCC_PLL_GetMainSource>
 8003326:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d003      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0xde>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b03      	cmp	r3, #3
 8003332:	d003      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0xe4>
 8003334:	e00d      	b.n	8003352 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003336:	4b16      	ldr	r3, [pc, #88]	; (8003390 <HAL_RCC_GetSysClockFreq+0x138>)
 8003338:	60fb      	str	r3, [r7, #12]
        break;
 800333a:	e00d      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800333c:	f7ff f884 	bl	8002448 <LL_RCC_HSE_IsEnabledDiv2>
 8003340:	4603      	mov	r3, r0
 8003342:	2b01      	cmp	r3, #1
 8003344:	d102      	bne.n	800334c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003346:	4b12      	ldr	r3, [pc, #72]	; (8003390 <HAL_RCC_GetSysClockFreq+0x138>)
 8003348:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800334a:	e005      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_RCC_GetSysClockFreq+0x13c>)
 800334e:	60fb      	str	r3, [r7, #12]
        break;
 8003350:	e002      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	60fb      	str	r3, [r7, #12]
        break;
 8003356:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003358:	f7ff fa66 	bl	8002828 <LL_RCC_PLL_GetN>
 800335c:	4602      	mov	r2, r0
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	fb03 f402 	mul.w	r4, r3, r2
 8003364:	f7ff fa77 	bl	8002856 <LL_RCC_PLL_GetDivider>
 8003368:	4603      	mov	r3, r0
 800336a:	091b      	lsrs	r3, r3, #4
 800336c:	3301      	adds	r3, #1
 800336e:	fbb4 f4f3 	udiv	r4, r4, r3
 8003372:	f7ff fa65 	bl	8002840 <LL_RCC_PLL_GetR>
 8003376:	4603      	mov	r3, r0
 8003378:	0f5b      	lsrs	r3, r3, #29
 800337a:	3301      	adds	r3, #1
 800337c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003380:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003382:	697b      	ldr	r3, [r7, #20]
}
 8003384:	4618      	mov	r0, r3
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	bd90      	pop	{r4, r7, pc}
 800338c:	08004a74 	.word	0x08004a74
 8003390:	00f42400 	.word	0x00f42400
 8003394:	01e84800 	.word	0x01e84800

08003398 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003398:	b598      	push	{r3, r4, r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800339c:	f7ff ff5c 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 80033a0:	4604      	mov	r4, r0
 80033a2:	f7ff f9e6 	bl	8002772 <LL_RCC_GetAHBPrescaler>
 80033a6:	4603      	mov	r3, r0
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	4a03      	ldr	r2, [pc, #12]	; (80033bc <HAL_RCC_GetHCLKFreq+0x24>)
 80033b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	bd98      	pop	{r3, r4, r7, pc}
 80033bc:	08004a14 	.word	0x08004a14

080033c0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c0:	b598      	push	{r3, r4, r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80033c4:	f7ff ffe8 	bl	8003398 <HAL_RCC_GetHCLKFreq>
 80033c8:	4604      	mov	r4, r0
 80033ca:	f7ff f9ea 	bl	80027a2 <LL_RCC_GetAPB1Prescaler>
 80033ce:	4603      	mov	r3, r0
 80033d0:	0a1b      	lsrs	r3, r3, #8
 80033d2:	4a03      	ldr	r2, [pc, #12]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd98      	pop	{r3, r4, r7, pc}
 80033e0:	08004a54 	.word	0x08004a54

080033e4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e4:	b598      	push	{r3, r4, r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80033e8:	f7ff ffd6 	bl	8003398 <HAL_RCC_GetHCLKFreq>
 80033ec:	4604      	mov	r4, r0
 80033ee:	f7ff f9e3 	bl	80027b8 <LL_RCC_GetAPB2Prescaler>
 80033f2:	4603      	mov	r3, r0
 80033f4:	0adb      	lsrs	r3, r3, #11
 80033f6:	4a03      	ldr	r2, [pc, #12]	; (8003404 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd98      	pop	{r3, r4, r7, pc}
 8003404:	08004a54 	.word	0x08004a54

08003408 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	4a10      	ldr	r2, [pc, #64]	; (800345c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800341a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003420:	f7ff f9b2 	bl	8002788 <LL_RCC_GetAHB3Prescaler>
 8003424:	4603      	mov	r3, r0
 8003426:	091b      	lsrs	r3, r3, #4
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	4a0c      	ldr	r2, [pc, #48]	; (8003460 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800342e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	fbb2 f3f3 	udiv	r3, r2, r3
 8003438:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4a09      	ldr	r2, [pc, #36]	; (8003464 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	0c9c      	lsrs	r4, r3, #18
 8003444:	f7fe ffc6 	bl	80023d4 <HAL_PWREx_GetVoltageRange>
 8003448:	4603      	mov	r3, r0
 800344a:	4619      	mov	r1, r3
 800344c:	4620      	mov	r0, r4
 800344e:	f000 f80b 	bl	8003468 <RCC_SetFlashLatency>
 8003452:	4603      	mov	r3, r0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	bd90      	pop	{r4, r7, pc}
 800345c:	08004a74 	.word	0x08004a74
 8003460:	08004a14 	.word	0x08004a14
 8003464:	431bde83 	.word	0x431bde83

08003468 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08e      	sub	sp, #56	; 0x38
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003472:	4a3a      	ldr	r2, [pc, #232]	; (800355c <RCC_SetFlashLatency+0xf4>)
 8003474:	f107 0320 	add.w	r3, r7, #32
 8003478:	e892 0003 	ldmia.w	r2, {r0, r1}
 800347c:	6018      	str	r0, [r3, #0]
 800347e:	3304      	adds	r3, #4
 8003480:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003482:	4a37      	ldr	r2, [pc, #220]	; (8003560 <RCC_SetFlashLatency+0xf8>)
 8003484:	f107 0318 	add.w	r3, r7, #24
 8003488:	e892 0003 	ldmia.w	r2, {r0, r1}
 800348c:	6018      	str	r0, [r3, #0]
 800348e:	3304      	adds	r3, #4
 8003490:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003492:	4a34      	ldr	r2, [pc, #208]	; (8003564 <RCC_SetFlashLatency+0xfc>)
 8003494:	f107 030c 	add.w	r3, r7, #12
 8003498:	ca07      	ldmia	r2, {r0, r1, r2}
 800349a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800349e:	2300      	movs	r3, #0
 80034a0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a8:	d11b      	bne.n	80034e2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80034aa:	2300      	movs	r3, #0
 80034ac:	633b      	str	r3, [r7, #48]	; 0x30
 80034ae:	e014      	b.n	80034da <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	3338      	adds	r3, #56	; 0x38
 80034b6:	443b      	add	r3, r7
 80034b8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80034bc:	461a      	mov	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d807      	bhi.n	80034d4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80034c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	3338      	adds	r3, #56	; 0x38
 80034ca:	443b      	add	r3, r7
 80034cc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80034d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034d2:	e021      	b.n	8003518 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80034d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d6:	3301      	adds	r3, #1
 80034d8:	633b      	str	r3, [r7, #48]	; 0x30
 80034da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d9e7      	bls.n	80034b0 <RCC_SetFlashLatency+0x48>
 80034e0:	e01a      	b.n	8003518 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80034e2:	2300      	movs	r3, #0
 80034e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034e6:	e014      	b.n	8003512 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80034e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	3338      	adds	r3, #56	; 0x38
 80034ee:	443b      	add	r3, r7
 80034f0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80034f4:	461a      	mov	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d807      	bhi.n	800350c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80034fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	3338      	adds	r3, #56	; 0x38
 8003502:	443b      	add	r3, r7
 8003504:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003508:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800350a:	e005      	b.n	8003518 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800350c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350e:	3301      	adds	r3, #1
 8003510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003514:	2b02      	cmp	r3, #2
 8003516:	d9e7      	bls.n	80034e8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003518:	4b13      	ldr	r3, [pc, #76]	; (8003568 <RCC_SetFlashLatency+0x100>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f023 0207 	bic.w	r2, r3, #7
 8003520:	4911      	ldr	r1, [pc, #68]	; (8003568 <RCC_SetFlashLatency+0x100>)
 8003522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003524:	4313      	orrs	r3, r2
 8003526:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003528:	f7fe f9b8 	bl	800189c <HAL_GetTick>
 800352c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800352e:	e008      	b.n	8003542 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003530:	f7fe f9b4 	bl	800189c <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e007      	b.n	8003552 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <RCC_SetFlashLatency+0x100>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800354c:	429a      	cmp	r2, r3
 800354e:	d1ef      	bne.n	8003530 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3738      	adds	r7, #56	; 0x38
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	0800499c 	.word	0x0800499c
 8003560:	080049a4 	.word	0x080049a4
 8003564:	080049ac 	.word	0x080049ac
 8003568:	58004000 	.word	0x58004000

0800356c <LL_RCC_LSE_IsReady>:
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b02      	cmp	r3, #2
 800357e:	d101      	bne.n	8003584 <LL_RCC_LSE_IsReady+0x18>
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <LL_RCC_LSE_IsReady+0x1a>
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr

0800358e <LL_RCC_SetUSARTClockSource>:
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0c1b      	lsrs	r3, r3, #16
 80035a2:	43db      	mvns	r3, r3
 80035a4:	401a      	ands	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr

080035be <LL_RCC_SetI2SClockSource>:
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80035c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <LL_RCC_SetLPUARTClockSource>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80035f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr

08003612 <LL_RCC_SetI2CClockSource>:
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800361a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800361e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800362a:	43db      	mvns	r3, r3
 800362c:	401a      	ands	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr

0800364a <LL_RCC_SetLPTIMClockSource>:
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003656:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	0c1b      	lsrs	r3, r3, #16
 800365e:	041b      	lsls	r3, r3, #16
 8003660:	43db      	mvns	r3, r3
 8003662:	401a      	ands	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	041b      	lsls	r3, r3, #16
 8003668:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr

0800367c <LL_RCC_SetRNGClockSource>:
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003690:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr

080036a6 <LL_RCC_SetADCClockSource>:
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80036ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr

080036d0 <LL_RCC_SetRTCClockSource>:
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80036d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr

080036fa <LL_RCC_GetRTCClockSource>:
{
 80036fa:	b480      	push	{r7}
 80036fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80036fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003706:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800370a:	4618      	mov	r0, r3
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr

08003712 <LL_RCC_ForceBackupDomainReset>:
{
 8003712:	b480      	push	{r7}
 8003714:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800372a:	bf00      	nop
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr

08003732 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003732:	b480      	push	{r7}
 8003734:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800374a:	bf00      	nop
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr
	...

08003754 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003760:	2300      	movs	r3, #0
 8003762:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003764:	2300      	movs	r3, #0
 8003766:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d058      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003774:	f7fe fe20 	bl	80023b8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003778:	f7fe f890 	bl	800189c <HAL_GetTick>
 800377c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800377e:	e009      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003780:	f7fe f88c 	bl	800189c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d902      	bls.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	74fb      	strb	r3, [r7, #19]
        break;
 8003792:	e006      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003794:	4b7b      	ldr	r3, [pc, #492]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a0:	d1ee      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80037a2:	7cfb      	ldrb	r3, [r7, #19]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d13c      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80037a8:	f7ff ffa7 	bl	80036fa <LL_RCC_GetRTCClockSource>
 80037ac:	4602      	mov	r2, r0
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d00f      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037c4:	f7ff ffa5 	bl	8003712 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037c8:	f7ff ffb3 	bl	8003732 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d014      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fe f85c 	bl	800189c <HAL_GetTick>
 80037e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80037e6:	e00b      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e8:	f7fe f858 	bl	800189c <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d902      	bls.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	74fb      	strb	r3, [r7, #19]
            break;
 80037fe:	e004      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003800:	f7ff feb4 	bl	800356c <LL_RCC_LSE_IsReady>
 8003804:	4603      	mov	r3, r0
 8003806:	2b01      	cmp	r3, #1
 8003808:	d1ee      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800380a:	7cfb      	ldrb	r3, [r7, #19]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d105      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff ff5b 	bl	80036d0 <LL_RCC_SetRTCClockSource>
 800381a:	e004      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800381c:	7cfb      	ldrb	r3, [r7, #19]
 800381e:	74bb      	strb	r3, [r7, #18]
 8003820:	e001      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003822:	7cfb      	ldrb	r3, [r7, #19]
 8003824:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d004      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff fea9 	bl	800358e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d004      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff fe9e 	bl	800358e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	d004      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff fec0 	bl	80035e8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff fee6 	bl	800364a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003886:	2b00      	cmp	r3, #0
 8003888:	d004      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff fedb 	bl	800364a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800389c:	2b00      	cmp	r3, #0
 800389e:	d004      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff fed0 	bl	800364a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d004      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff fea9 	bl	8003612 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d004      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff fe9e 	bl	8003612 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d004      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff fe93 	bl	8003612 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d011      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fe5e 	bl	80035be <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800390a:	d107      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800390c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800391a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fea5 	bl	800367c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	2b00      	cmp	r3, #0
 8003938:	d107      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800393a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003944:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003948:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d011      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fea3 	bl	80036a6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003968:	d107      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800396a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003978:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800397a:	7cbb      	ldrb	r3, [r7, #18]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	58000400 	.word	0x58000400

08003988 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003998:	4904      	ldr	r1, [pc, #16]	; (80039ac <LL_PWR_SetRadioBusyTrigger+0x24>)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4313      	orrs	r3, r2
 800399e:	608b      	str	r3, [r1, #8]
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	58000400 	.word	0x58000400

080039b0 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ba:	4a04      	ldr	r2, [pc, #16]	; (80039cc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80039bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80039c4:	bf00      	nop
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr
 80039cc:	58000400 	.word	0x58000400

080039d0 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80039d4:	4b05      	ldr	r3, [pc, #20]	; (80039ec <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	4a04      	ldr	r2, [pc, #16]	; (80039ec <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80039dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80039e4:	bf00      	nop
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr
 80039ec:	58000400 	.word	0x58000400

080039f0 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80039f4:	4b03      	ldr	r3, [pc, #12]	; (8003a04 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80039f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039fa:	619a      	str	r2, [r3, #24]
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr
 8003a04:	58000400 	.word	0x58000400

08003a08 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003a0c:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d101      	bne.n	8003a1c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	58000400 	.word	0x58000400

08003a2c <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d101      	bne.n	8003a40 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	58000400 	.word	0x58000400

08003a50 <LL_RCC_RF_DisableReset>:
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003a68:	bf00      	nop
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr

08003a70 <LL_RCC_IsRFUnderReset>:
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a84:	d101      	bne.n	8003a8a <LL_RCC_IsRFUnderReset+0x1a>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <LL_RCC_IsRFUnderReset+0x1c>
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr

08003a94 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <LL_EXTI_EnableIT_32_63+0x24>)
 8003a9e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003aa2:	4905      	ldr	r1, [pc, #20]	; (8003ab8 <LL_EXTI_EnableIT_32_63+0x24>)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	58000800 	.word	0x58000800

08003abc <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d103      	bne.n	8003ad2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
    return status;
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	e052      	b.n	8003b78 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	799b      	ldrb	r3, [r3, #6]
 8003ada:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8003adc:	7bbb      	ldrb	r3, [r7, #14]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_SUBGHZ_Init+0x2c>
 8003ae2:	7bbb      	ldrb	r3, [r7, #14]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d109      	bne.n	8003afc <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fd fdbe 	bl	8001670 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003af4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003af8:	f7ff ffcc 	bl	8003a94 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003afc:	7bbb      	ldrb	r3, [r7, #14]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d126      	bne.n	8003b50 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8003b08:	f7ff ffa2 	bl	8003a50 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003b0c:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <HAL_SUBGHZ_Init+0xc4>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4613      	mov	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	0cdb      	lsrs	r3, r3, #19
 8003b1a:	2264      	movs	r2, #100	; 0x64
 8003b1c:	fb02 f303 	mul.w	r3, r2, r3
 8003b20:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d105      	bne.n	8003b34 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	609a      	str	r2, [r3, #8]
        break;
 8003b32:	e007      	b.n	8003b44 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003b3a:	f7ff ff99 	bl	8003a70 <LL_RCC_IsRFUnderReset>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1ee      	bne.n	8003b22 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003b44:	f7ff ff34 	bl	80039b0 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003b48:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003b4c:	f7ff ff1c 	bl	8003988 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003b50:	f7ff ff4e 	bl	80039f0 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10a      	bne.n	8003b70 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 f870 	bl	8003c44 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	719a      	strb	r2, [r3, #6]

  return status;
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000008 	.word	0x20000008

08003b84 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	460b      	mov	r3, r1
 8003b92:	72fb      	strb	r3, [r7, #11]
 8003b94:	4613      	mov	r3, r2
 8003b96:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	799b      	ldrb	r3, [r3, #6]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d14a      	bne.n	8003c38 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	795b      	ldrb	r3, [r3, #5]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e045      	b.n	8003c3a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 f8bb 	bl	8003d30 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003bba:	7afb      	ldrb	r3, [r7, #11]
 8003bbc:	2b84      	cmp	r3, #132	; 0x84
 8003bbe:	d002      	beq.n	8003bc6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003bc0:	7afb      	ldrb	r3, [r7, #11]
 8003bc2:	2b94      	cmp	r3, #148	; 0x94
 8003bc4:	d103      	bne.n	8003bce <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	711a      	strb	r2, [r3, #4]
 8003bcc:	e002      	b.n	8003bd4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003bd4:	f7ff fefc 	bl	80039d0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003bd8:	7afb      	ldrb	r3, [r7, #11]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 f851 	bl	8003c84 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003be2:	2300      	movs	r3, #0
 8003be4:	82bb      	strh	r3, [r7, #20]
 8003be6:	e00a      	b.n	8003bfe <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003be8:	8abb      	ldrh	r3, [r7, #20]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f846 	bl	8003c84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003bf8:	8abb      	ldrh	r3, [r7, #20]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	82bb      	strh	r3, [r7, #20]
 8003bfe:	8aba      	ldrh	r2, [r7, #20]
 8003c00:	893b      	ldrh	r3, [r7, #8]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d3f0      	bcc.n	8003be8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003c06:	f7ff fed3 	bl	80039b0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003c0a:	7afb      	ldrb	r3, [r7, #11]
 8003c0c:	2b84      	cmp	r3, #132	; 0x84
 8003c0e:	d002      	beq.n	8003c16 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f8b1 	bl	8003d78 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	75fb      	strb	r3, [r7, #23]
 8003c22:	e001      	b.n	8003c28 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	715a      	strb	r2, [r3, #5]

    return status;
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	e000      	b.n	8003c3a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003c38:	2302      	movs	r3, #2
  }
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <SUBGHZSPI_Init+0x3c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0b      	ldr	r2, [pc, #44]	; (8003c80 <SUBGHZSPI_Init+0x3c>)
 8003c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c56:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003c58:	4a09      	ldr	r2, [pc, #36]	; (8003c80 <SUBGHZSPI_Init+0x3c>)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8003c60:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003c62:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <SUBGHZSPI_Init+0x3c>)
 8003c64:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8003c68:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <SUBGHZSPI_Init+0x3c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <SUBGHZSPI_Init+0x3c>)
 8003c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c74:	6013      	str	r3, [r2, #0]
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr
 8003c80:	58010000 	.word	0x58010000

08003c84 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003c94:	4b23      	ldr	r3, [pc, #140]	; (8003d24 <SUBGHZSPI_Transmit+0xa0>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	0cdb      	lsrs	r3, r3, #19
 8003ca2:	2264      	movs	r2, #100	; 0x64
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d105      	bne.n	8003cbc <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	609a      	str	r2, [r3, #8]
      break;
 8003cba:	e008      	b.n	8003cce <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003cc2:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <SUBGHZSPI_Transmit+0xa4>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d1ed      	bne.n	8003caa <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003cce:	4b17      	ldr	r3, [pc, #92]	; (8003d2c <SUBGHZSPI_Transmit+0xa8>)
 8003cd0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	78fa      	ldrb	r2, [r7, #3]
 8003cd6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003cd8:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <SUBGHZSPI_Transmit+0xa0>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	0cdb      	lsrs	r3, r3, #19
 8003ce6:	2264      	movs	r2, #100	; 0x64
 8003ce8:	fb02 f303 	mul.w	r3, r2, r3
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d105      	bne.n	8003d00 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	609a      	str	r2, [r3, #8]
      break;
 8003cfe:	e008      	b.n	8003d12 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003d06:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <SUBGHZSPI_Transmit+0xa4>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d1ed      	bne.n	8003cee <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003d12:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <SUBGHZSPI_Transmit+0xa4>)
 8003d14:	68db      	ldr	r3, [r3, #12]

  return status;
 8003d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	20000008 	.word	0x20000008
 8003d28:	58010000 	.word	0x58010000
 8003d2c:	5801000c 	.word	0x5801000c

08003d30 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	791b      	ldrb	r3, [r3, #4]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d111      	bne.n	8003d64 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003d40:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <SUBGHZ_CheckDeviceReady+0x44>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	4613      	mov	r3, r2
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	4413      	add	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	0c1b      	lsrs	r3, r3, #16
 8003d4e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003d50:	f7ff fe3e 	bl	80039d0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f9      	bne.n	8003d54 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003d60:	f7ff fe26 	bl	80039b0 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f807 	bl	8003d78 <SUBGHZ_WaitOnBusy>
 8003d6a:	4603      	mov	r3, r0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20000008 	.word	0x20000008

08003d78 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003d84:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <SUBGHZ_WaitOnBusy+0x58>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	4413      	add	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	0d1b      	lsrs	r3, r3, #20
 8003d92:	2264      	movs	r2, #100	; 0x64
 8003d94:	fb02 f303 	mul.w	r3, r2, r3
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8003d9a:	f7ff fe47 	bl	8003a2c <LL_PWR_IsActiveFlag_RFBUSYMS>
 8003d9e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d105      	bne.n	8003db2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2202      	movs	r2, #2
 8003dae:	609a      	str	r2, [r3, #8]
      break;
 8003db0:	e009      	b.n	8003dc6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003db8:	f7ff fe26 	bl	8003a08 <LL_PWR_IsActiveFlag_RFBUSYS>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d0e9      	beq.n	8003d9a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000008 	.word	0x20000008

08003dd4 <LL_RCC_GetUSARTClockSource>:
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	401a      	ands	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	041b      	lsls	r3, r3, #16
 8003dec:	4313      	orrs	r3, r2
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr

08003df8 <LL_RCC_GetLPUARTClockSource>:
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e04:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4013      	ands	r3, r2
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr

08003e16 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b082      	sub	sp, #8
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e042      	b.n	8003eae <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d106      	bne.n	8003e40 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fd fc24 	bl	8001688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2224      	movs	r2, #36	; 0x24
 8003e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0201 	bic.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f82d 	bl	8003eb8 <UART_SetConfig>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e022      	b.n	8003eae <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 fa95 	bl	80043a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0201 	orr.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fb1b 	bl	80044e2 <UART_CheckIdleState>
 8003eac:	4603      	mov	r3, r0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ebc:	b08c      	sub	sp, #48	; 0x30
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	4b94      	ldr	r3, [pc, #592]	; (8004138 <UART_SetConfig+0x280>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	6812      	ldr	r2, [r2, #0]
 8003eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a89      	ldr	r2, [pc, #548]	; (800413c <UART_SetConfig+0x284>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d004      	beq.n	8003f24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f20:	4313      	orrs	r3, r2
 8003f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003f2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	6812      	ldr	r2, [r2, #0]
 8003f36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	f023 010f 	bic.w	r1, r3, #15
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a7a      	ldr	r2, [pc, #488]	; (8004140 <UART_SetConfig+0x288>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d127      	bne.n	8003fac <UART_SetConfig+0xf4>
 8003f5c:	2003      	movs	r0, #3
 8003f5e:	f7ff ff39 	bl	8003dd4 <LL_RCC_GetUSARTClockSource>
 8003f62:	4603      	mov	r3, r0
 8003f64:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d81b      	bhi.n	8003fa4 <UART_SetConfig+0xec>
 8003f6c:	a201      	add	r2, pc, #4	; (adr r2, 8003f74 <UART_SetConfig+0xbc>)
 8003f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f72:	bf00      	nop
 8003f74:	08003f85 	.word	0x08003f85
 8003f78:	08003f95 	.word	0x08003f95
 8003f7c:	08003f8d 	.word	0x08003f8d
 8003f80:	08003f9d 	.word	0x08003f9d
 8003f84:	2301      	movs	r3, #1
 8003f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f8a:	e080      	b.n	800408e <UART_SetConfig+0x1d6>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f92:	e07c      	b.n	800408e <UART_SetConfig+0x1d6>
 8003f94:	2304      	movs	r3, #4
 8003f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f9a:	e078      	b.n	800408e <UART_SetConfig+0x1d6>
 8003f9c:	2308      	movs	r3, #8
 8003f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fa2:	e074      	b.n	800408e <UART_SetConfig+0x1d6>
 8003fa4:	2310      	movs	r3, #16
 8003fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003faa:	e070      	b.n	800408e <UART_SetConfig+0x1d6>
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a64      	ldr	r2, [pc, #400]	; (8004144 <UART_SetConfig+0x28c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d138      	bne.n	8004028 <UART_SetConfig+0x170>
 8003fb6:	200c      	movs	r0, #12
 8003fb8:	f7ff ff0c 	bl	8003dd4 <LL_RCC_GetUSARTClockSource>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003fc2:	2b0c      	cmp	r3, #12
 8003fc4:	d82c      	bhi.n	8004020 <UART_SetConfig+0x168>
 8003fc6:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <UART_SetConfig+0x114>)
 8003fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fcc:	08004001 	.word	0x08004001
 8003fd0:	08004021 	.word	0x08004021
 8003fd4:	08004021 	.word	0x08004021
 8003fd8:	08004021 	.word	0x08004021
 8003fdc:	08004011 	.word	0x08004011
 8003fe0:	08004021 	.word	0x08004021
 8003fe4:	08004021 	.word	0x08004021
 8003fe8:	08004021 	.word	0x08004021
 8003fec:	08004009 	.word	0x08004009
 8003ff0:	08004021 	.word	0x08004021
 8003ff4:	08004021 	.word	0x08004021
 8003ff8:	08004021 	.word	0x08004021
 8003ffc:	08004019 	.word	0x08004019
 8004000:	2300      	movs	r3, #0
 8004002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004006:	e042      	b.n	800408e <UART_SetConfig+0x1d6>
 8004008:	2302      	movs	r3, #2
 800400a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800400e:	e03e      	b.n	800408e <UART_SetConfig+0x1d6>
 8004010:	2304      	movs	r3, #4
 8004012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004016:	e03a      	b.n	800408e <UART_SetConfig+0x1d6>
 8004018:	2308      	movs	r3, #8
 800401a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800401e:	e036      	b.n	800408e <UART_SetConfig+0x1d6>
 8004020:	2310      	movs	r3, #16
 8004022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004026:	e032      	b.n	800408e <UART_SetConfig+0x1d6>
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a43      	ldr	r2, [pc, #268]	; (800413c <UART_SetConfig+0x284>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d12a      	bne.n	8004088 <UART_SetConfig+0x1d0>
 8004032:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004036:	f7ff fedf 	bl	8003df8 <LL_RCC_GetLPUARTClockSource>
 800403a:	4603      	mov	r3, r0
 800403c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004040:	d01a      	beq.n	8004078 <UART_SetConfig+0x1c0>
 8004042:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004046:	d81b      	bhi.n	8004080 <UART_SetConfig+0x1c8>
 8004048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800404c:	d00c      	beq.n	8004068 <UART_SetConfig+0x1b0>
 800404e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004052:	d815      	bhi.n	8004080 <UART_SetConfig+0x1c8>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <UART_SetConfig+0x1a8>
 8004058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405c:	d008      	beq.n	8004070 <UART_SetConfig+0x1b8>
 800405e:	e00f      	b.n	8004080 <UART_SetConfig+0x1c8>
 8004060:	2300      	movs	r3, #0
 8004062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004066:	e012      	b.n	800408e <UART_SetConfig+0x1d6>
 8004068:	2302      	movs	r3, #2
 800406a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800406e:	e00e      	b.n	800408e <UART_SetConfig+0x1d6>
 8004070:	2304      	movs	r3, #4
 8004072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004076:	e00a      	b.n	800408e <UART_SetConfig+0x1d6>
 8004078:	2308      	movs	r3, #8
 800407a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800407e:	e006      	b.n	800408e <UART_SetConfig+0x1d6>
 8004080:	2310      	movs	r3, #16
 8004082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004086:	e002      	b.n	800408e <UART_SetConfig+0x1d6>
 8004088:	2310      	movs	r3, #16
 800408a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a2a      	ldr	r2, [pc, #168]	; (800413c <UART_SetConfig+0x284>)
 8004094:	4293      	cmp	r3, r2
 8004096:	f040 80a4 	bne.w	80041e2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800409a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d823      	bhi.n	80040ea <UART_SetConfig+0x232>
 80040a2:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <UART_SetConfig+0x1f0>)
 80040a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a8:	080040cd 	.word	0x080040cd
 80040ac:	080040eb 	.word	0x080040eb
 80040b0:	080040d5 	.word	0x080040d5
 80040b4:	080040eb 	.word	0x080040eb
 80040b8:	080040db 	.word	0x080040db
 80040bc:	080040eb 	.word	0x080040eb
 80040c0:	080040eb 	.word	0x080040eb
 80040c4:	080040eb 	.word	0x080040eb
 80040c8:	080040e3 	.word	0x080040e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040cc:	f7ff f978 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 80040d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040d2:	e010      	b.n	80040f6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040d4:	4b1c      	ldr	r3, [pc, #112]	; (8004148 <UART_SetConfig+0x290>)
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040d8:	e00d      	b.n	80040f6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040da:	f7ff f8bd 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 80040de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040e0:	e009      	b.n	80040f6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040e8:	e005      	b.n	80040f6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 8137 	beq.w	800436c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	4a12      	ldr	r2, [pc, #72]	; (800414c <UART_SetConfig+0x294>)
 8004104:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004108:	461a      	mov	r2, r3
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004110:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	4413      	add	r3, r2
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	429a      	cmp	r2, r3
 8004120:	d305      	bcc.n	800412e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	429a      	cmp	r2, r3
 800412c:	d910      	bls.n	8004150 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004134:	e11a      	b.n	800436c <UART_SetConfig+0x4b4>
 8004136:	bf00      	nop
 8004138:	cfff69f3 	.word	0xcfff69f3
 800413c:	40008000 	.word	0x40008000
 8004140:	40013800 	.word	0x40013800
 8004144:	40004400 	.word	0x40004400
 8004148:	00f42400 	.word	0x00f42400
 800414c:	08004ab4 	.word	0x08004ab4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	2200      	movs	r2, #0
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	60fa      	str	r2, [r7, #12]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	4a8e      	ldr	r2, [pc, #568]	; (8004398 <UART_SetConfig+0x4e0>)
 800415e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004162:	b29b      	uxth	r3, r3
 8004164:	2200      	movs	r2, #0
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	607a      	str	r2, [r7, #4]
 800416a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800416e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004172:	f7fc fbef 	bl	8000954 <__aeabi_uldivmod>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	4610      	mov	r0, r2
 800417c:	4619      	mov	r1, r3
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	020b      	lsls	r3, r1, #8
 8004188:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800418c:	0202      	lsls	r2, r0, #8
 800418e:	6979      	ldr	r1, [r7, #20]
 8004190:	6849      	ldr	r1, [r1, #4]
 8004192:	0849      	lsrs	r1, r1, #1
 8004194:	2000      	movs	r0, #0
 8004196:	460c      	mov	r4, r1
 8004198:	4605      	mov	r5, r0
 800419a:	eb12 0804 	adds.w	r8, r2, r4
 800419e:	eb43 0905 	adc.w	r9, r3, r5
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	469a      	mov	sl, r3
 80041aa:	4693      	mov	fp, r2
 80041ac:	4652      	mov	r2, sl
 80041ae:	465b      	mov	r3, fp
 80041b0:	4640      	mov	r0, r8
 80041b2:	4649      	mov	r1, r9
 80041b4:	f7fc fbce 	bl	8000954 <__aeabi_uldivmod>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4613      	mov	r3, r2
 80041be:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041c6:	d308      	bcc.n	80041da <UART_SetConfig+0x322>
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ce:	d204      	bcs.n	80041da <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6a3a      	ldr	r2, [r7, #32]
 80041d6:	60da      	str	r2, [r3, #12]
 80041d8:	e0c8      	b.n	800436c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80041e0:	e0c4      	b.n	800436c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ea:	d167      	bne.n	80042bc <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80041ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d828      	bhi.n	8004246 <UART_SetConfig+0x38e>
 80041f4:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <UART_SetConfig+0x344>)
 80041f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	08004221 	.word	0x08004221
 8004200:	08004229 	.word	0x08004229
 8004204:	08004231 	.word	0x08004231
 8004208:	08004247 	.word	0x08004247
 800420c:	08004237 	.word	0x08004237
 8004210:	08004247 	.word	0x08004247
 8004214:	08004247 	.word	0x08004247
 8004218:	08004247 	.word	0x08004247
 800421c:	0800423f 	.word	0x0800423f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004220:	f7ff f8ce 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 8004224:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004226:	e014      	b.n	8004252 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004228:	f7ff f8dc 	bl	80033e4 <HAL_RCC_GetPCLK2Freq>
 800422c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800422e:	e010      	b.n	8004252 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004230:	4b5a      	ldr	r3, [pc, #360]	; (800439c <UART_SetConfig+0x4e4>)
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004234:	e00d      	b.n	8004252 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004236:	f7ff f80f 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 800423a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800423c:	e009      	b.n	8004252 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800423e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004244:	e005      	b.n	8004252 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004250:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 8089 	beq.w	800436c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	4a4e      	ldr	r2, [pc, #312]	; (8004398 <UART_SetConfig+0x4e0>)
 8004260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004264:	461a      	mov	r2, r3
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	fbb3 f3f2 	udiv	r3, r3, r2
 800426c:	005a      	lsls	r2, r3, #1
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	085b      	lsrs	r3, r3, #1
 8004274:	441a      	add	r2, r3
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	fbb2 f3f3 	udiv	r3, r2, r3
 800427e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	2b0f      	cmp	r3, #15
 8004284:	d916      	bls.n	80042b4 <UART_SetConfig+0x3fc>
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428c:	d212      	bcs.n	80042b4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	b29b      	uxth	r3, r3
 8004292:	f023 030f 	bic.w	r3, r3, #15
 8004296:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	085b      	lsrs	r3, r3, #1
 800429c:	b29b      	uxth	r3, r3
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	8bfb      	ldrh	r3, [r7, #30]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	8bfa      	ldrh	r2, [r7, #30]
 80042b0:	60da      	str	r2, [r3, #12]
 80042b2:	e05b      	b.n	800436c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80042ba:	e057      	b.n	800436c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d828      	bhi.n	8004316 <UART_SetConfig+0x45e>
 80042c4:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <UART_SetConfig+0x414>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	080042f1 	.word	0x080042f1
 80042d0:	080042f9 	.word	0x080042f9
 80042d4:	08004301 	.word	0x08004301
 80042d8:	08004317 	.word	0x08004317
 80042dc:	08004307 	.word	0x08004307
 80042e0:	08004317 	.word	0x08004317
 80042e4:	08004317 	.word	0x08004317
 80042e8:	08004317 	.word	0x08004317
 80042ec:	0800430f 	.word	0x0800430f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042f0:	f7ff f866 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 80042f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042f6:	e014      	b.n	8004322 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042f8:	f7ff f874 	bl	80033e4 <HAL_RCC_GetPCLK2Freq>
 80042fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042fe:	e010      	b.n	8004322 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004300:	4b26      	ldr	r3, [pc, #152]	; (800439c <UART_SetConfig+0x4e4>)
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004304:	e00d      	b.n	8004322 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004306:	f7fe ffa7 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 800430a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800430c:	e009      	b.n	8004322 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800430e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004314:	e005      	b.n	8004322 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004320:	bf00      	nop
    }

    if (pclk != 0U)
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	2b00      	cmp	r3, #0
 8004326:	d021      	beq.n	800436c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	4a1a      	ldr	r2, [pc, #104]	; (8004398 <UART_SetConfig+0x4e0>)
 800432e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004332:	461a      	mov	r2, r3
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	fbb3 f2f2 	udiv	r2, r3, r2
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	085b      	lsrs	r3, r3, #1
 8004340:	441a      	add	r2, r3
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	fbb2 f3f3 	udiv	r3, r2, r3
 800434a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	2b0f      	cmp	r3, #15
 8004350:	d909      	bls.n	8004366 <UART_SetConfig+0x4ae>
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004358:	d205      	bcs.n	8004366 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	b29a      	uxth	r2, r3
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60da      	str	r2, [r3, #12]
 8004364:	e002      	b.n	800436c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2201      	movs	r2, #1
 8004370:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2201      	movs	r2, #1
 8004378:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	2200      	movs	r2, #0
 8004380:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2200      	movs	r2, #0
 8004386:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004388:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800438c:	4618      	mov	r0, r3
 800438e:	3730      	adds	r7, #48	; 0x30
 8004390:	46bd      	mov	sp, r7
 8004392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004396:	bf00      	nop
 8004398:	08004ab4 	.word	0x08004ab4
 800439c:	00f42400 	.word	0x00f42400

080043a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01a      	beq.n	80044b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800449e:	d10a      	bne.n	80044b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	605a      	str	r2, [r3, #4]
  }
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr

080044e2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b086      	sub	sp, #24
 80044e6:	af02      	add	r7, sp, #8
 80044e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044f2:	f7fd f9d3 	bl	800189c <HAL_GetTick>
 80044f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b08      	cmp	r3, #8
 8004504:	d10e      	bne.n	8004524 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004506:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f832 	bl	800457e <UART_WaitOnFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e028      	b.n	8004576 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b04      	cmp	r3, #4
 8004530:	d10e      	bne.n	8004550 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004532:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f81c 	bl	800457e <UART_WaitOnFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e012      	b.n	8004576 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b09c      	sub	sp, #112	; 0x70
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	603b      	str	r3, [r7, #0]
 800458a:	4613      	mov	r3, r2
 800458c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800458e:	e0a9      	b.n	80046e4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004596:	f000 80a5 	beq.w	80046e4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459a:	f7fd f97f 	bl	800189c <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d302      	bcc.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80045aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d140      	bne.n	8004632 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80045be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045c4:	667b      	str	r3, [r7, #100]	; 0x64
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80045d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80045dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e6      	bne.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3308      	adds	r3, #8
 80045e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ec:	e853 3f00 	ldrex	r3, [r3]
 80045f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f4:	f023 0301 	bic.w	r3, r3, #1
 80045f8:	663b      	str	r3, [r7, #96]	; 0x60
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3308      	adds	r3, #8
 8004600:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004602:	64ba      	str	r2, [r7, #72]	; 0x48
 8004604:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004606:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004608:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1e5      	bne.n	80045e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2220      	movs	r2, #32
 8004622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e069      	b.n	8004706 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d051      	beq.n	80046e4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800464a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800464e:	d149      	bne.n	80046e4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004658:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004662:	e853 3f00 	ldrex	r3, [r3]
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800466e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004678:	637b      	str	r3, [r7, #52]	; 0x34
 800467a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800467e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e6      	bne.n	800465a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3308      	adds	r3, #8
 8004692:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	e853 3f00 	ldrex	r3, [r3]
 800469a:	613b      	str	r3, [r7, #16]
   return(result);
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f023 0301 	bic.w	r3, r3, #1
 80046a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3308      	adds	r3, #8
 80046aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046ac:	623a      	str	r2, [r7, #32]
 80046ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b0:	69f9      	ldr	r1, [r7, #28]
 80046b2:	6a3a      	ldr	r2, [r7, #32]
 80046b4:	e841 2300 	strex	r3, r2, [r1]
 80046b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1e5      	bne.n	800468c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e010      	b.n	8004706 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69da      	ldr	r2, [r3, #28]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	4013      	ands	r3, r2
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	bf0c      	ite	eq
 80046f4:	2301      	moveq	r3, #1
 80046f6:	2300      	movne	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	461a      	mov	r2, r3
 80046fc:	79fb      	ldrb	r3, [r7, #7]
 80046fe:	429a      	cmp	r2, r3
 8004700:	f43f af46 	beq.w	8004590 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3770      	adds	r7, #112	; 0x70
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_UARTEx_DisableFifoMode+0x16>
 8004720:	2302      	movs	r3, #2
 8004722:	e027      	b.n	8004774 <HAL_UARTEx_DisableFifoMode+0x66>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2224      	movs	r2, #36	; 0x24
 8004730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004752:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr

0800477e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004792:	2302      	movs	r3, #2
 8004794:	e02d      	b.n	80047f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2224      	movs	r2, #36	; 0x24
 80047a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0201 	bic.w	r2, r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f850 	bl	8004878 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b084      	sub	sp, #16
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800480e:	2302      	movs	r3, #2
 8004810:	e02d      	b.n	800486e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2224      	movs	r2, #36	; 0x24
 800481e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0201 	bic.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f812 	bl	8004878 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004884:	2b00      	cmp	r3, #0
 8004886:	d108      	bne.n	800489a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004898:	e031      	b.n	80048fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800489a:	2308      	movs	r3, #8
 800489c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800489e:	2308      	movs	r3, #8
 80048a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	0e5b      	lsrs	r3, r3, #25
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	0f5b      	lsrs	r3, r3, #29
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048c2:	7bbb      	ldrb	r3, [r7, #14]
 80048c4:	7b3a      	ldrb	r2, [r7, #12]
 80048c6:	4910      	ldr	r1, [pc, #64]	; (8004908 <UARTEx_SetNbDataToProcess+0x90>)
 80048c8:	5c8a      	ldrb	r2, [r1, r2]
 80048ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80048ce:	7b3a      	ldrb	r2, [r7, #12]
 80048d0:	490e      	ldr	r1, [pc, #56]	; (800490c <UARTEx_SetNbDataToProcess+0x94>)
 80048d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80048d8:	b29a      	uxth	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	7b7a      	ldrb	r2, [r7, #13]
 80048e4:	4908      	ldr	r1, [pc, #32]	; (8004908 <UARTEx_SetNbDataToProcess+0x90>)
 80048e6:	5c8a      	ldrb	r2, [r1, r2]
 80048e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80048ec:	7b7a      	ldrb	r2, [r7, #13]
 80048ee:	4907      	ldr	r1, [pc, #28]	; (800490c <UARTEx_SetNbDataToProcess+0x94>)
 80048f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr
 8004908:	08004acc 	.word	0x08004acc
 800490c:	08004ad4 	.word	0x08004ad4

08004910 <__libc_init_array>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	4d0d      	ldr	r5, [pc, #52]	; (8004948 <__libc_init_array+0x38>)
 8004914:	4c0d      	ldr	r4, [pc, #52]	; (800494c <__libc_init_array+0x3c>)
 8004916:	1b64      	subs	r4, r4, r5
 8004918:	10a4      	asrs	r4, r4, #2
 800491a:	2600      	movs	r6, #0
 800491c:	42a6      	cmp	r6, r4
 800491e:	d109      	bne.n	8004934 <__libc_init_array+0x24>
 8004920:	4d0b      	ldr	r5, [pc, #44]	; (8004950 <__libc_init_array+0x40>)
 8004922:	4c0c      	ldr	r4, [pc, #48]	; (8004954 <__libc_init_array+0x44>)
 8004924:	f000 f820 	bl	8004968 <_init>
 8004928:	1b64      	subs	r4, r4, r5
 800492a:	10a4      	asrs	r4, r4, #2
 800492c:	2600      	movs	r6, #0
 800492e:	42a6      	cmp	r6, r4
 8004930:	d105      	bne.n	800493e <__libc_init_array+0x2e>
 8004932:	bd70      	pop	{r4, r5, r6, pc}
 8004934:	f855 3b04 	ldr.w	r3, [r5], #4
 8004938:	4798      	blx	r3
 800493a:	3601      	adds	r6, #1
 800493c:	e7ee      	b.n	800491c <__libc_init_array+0xc>
 800493e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004942:	4798      	blx	r3
 8004944:	3601      	adds	r6, #1
 8004946:	e7f2      	b.n	800492e <__libc_init_array+0x1e>
 8004948:	08004ae4 	.word	0x08004ae4
 800494c:	08004ae4 	.word	0x08004ae4
 8004950:	08004ae4 	.word	0x08004ae4
 8004954:	08004ae8 	.word	0x08004ae8

08004958 <memset>:
 8004958:	4402      	add	r2, r0
 800495a:	4603      	mov	r3, r0
 800495c:	4293      	cmp	r3, r2
 800495e:	d100      	bne.n	8004962 <memset+0xa>
 8004960:	4770      	bx	lr
 8004962:	f803 1b01 	strb.w	r1, [r3], #1
 8004966:	e7f9      	b.n	800495c <memset+0x4>

08004968 <_init>:
 8004968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496a:	bf00      	nop
 800496c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800496e:	bc08      	pop	{r3}
 8004970:	469e      	mov	lr, r3
 8004972:	4770      	bx	lr

08004974 <_fini>:
 8004974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004976:	bf00      	nop
 8004978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800497a:	bc08      	pop	{r3}
 800497c:	469e      	mov	lr, r3
 800497e:	4770      	bx	lr
